<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JS知识面试题</title>
      <link href="/2019/01/07/JS%E7%9F%A5%E8%AF%86%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/01/07/JS%E7%9F%A5%E8%AF%86%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础javascript篇"><a href="#一、基础javascript篇" class="headerlink" title="一、基础javascript篇"></a>一、基础javascript篇</h1><h2 id="1、类的创建和继承"><a href="#1、类的创建和继承" class="headerlink" title="1、类的创建和继承"></a>1、类的创建和继承</h2><p>（1）类的创建（es5）：new一个function，在这个function的prototype里面增加属性和方法。</p><p>下面来创建一个Animal类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个动物类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 属性</span></span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Animal'</span>;</span><br><span class="line">  <span class="comment">// 实例方法</span></span><br><span class="line">  <span class="keyword">this</span>.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在睡觉！'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型方法</span></span><br><span class="line">Animal.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'正在吃：'</span> + food);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><p>这样就生成了一个Animal类，实力化生成对象后，有方法和属性。</p><p>（2）类的继承——原型链继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--原型链继承</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123; &#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.name = <span class="string">'cat'</span>;</span><br><span class="line"><span class="comment">//&amp;emsp;Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.eat(<span class="string">'fish'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">//true </span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>介绍：在这里我们可以看到new了一个空对象,这个空对象指向Animal并且Cat.prototype指向了这个空对象，这种就是基于原型链的继承。</li><li>特点：基于原型链，既是父类的实例，也是子类的实例</li><li>缺点：无法实现多继承</li></ul><p>（3）构造继承：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>特点：可以实现多继承</li><li>缺点：只能继承父类实例的属性和方法，不能继承原型上的属性和方法。</li></ul><p>（4）实例继承和拷贝继承<br></p><ul><li>实例继承：为父类实例添加新特性，作为子类实例返回</li><li>拷贝继承：拷贝父类元素上的属性和方法</li><li>上述两个实用性不强，不一一举例。</li></ul><p>（5）组合继承：相当于构造继承和原型链继承的组合体。通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cat.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line">Cat.prototype.constructor = Cat;</span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>特点：可以继承实例属性/方法，也可以继承原型属性/方法</li><li>缺点：调用了两次父类构造函数，生成了两份实例</li></ul><p>（6）寄生组合继承：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">this</span>.name = name || <span class="string">'Tom'</span>;</span><br><span class="line">&#125;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 创建一个没有实例方法的类</span></span><br><span class="line">  <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  Super.prototype = Animal.prototype;</span><br><span class="line">  <span class="comment">//将实例作为子类的原型</span></span><br><span class="line">  Cat.prototype = <span class="keyword">new</span> Super();</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.name);</span><br><span class="line"><span class="built_in">console</span>.log(cat.sleep());</span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Animal); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(cat <span class="keyword">instanceof</span> Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>较为推荐</li></ul><h2 id="2、说说前端中的事件流"><a href="#2、说说前端中的事件流" class="headerlink" title="2、说说前端中的事件流"></a>2、说说前端中的事件流</h2><p>&emsp;&emsp;HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件onclick、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。<br><br>&emsp;&emsp;什么是事件流：事件流描述的是从页面中接收事件的顺序,DOM2级事件流包括下面几个阶段。</p><ul><li>事件捕获阶段</li><li>处于目标阶段</li><li>事件冒泡阶段</li></ul><p>&emsp;&emsp;addEventListener：addEventListener 是DOM2 级事件新增的指定事件处理程序的操作，这个方法接收3个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值参数如果是true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。</p><ul><li><strong>IE只支持事件冒泡。</strong></li></ul><h2 id="3、如何让事件先冒泡后捕获"><a href="#3、如何让事件先冒泡后捕获" class="headerlink" title="3、如何让事件先冒泡后捕获"></a>3、如何让事件先冒泡后捕获</h2><p>&emsp;&emsp;在DOM标准事件模型中，是先捕获后冒泡。但是如果要实现先冒泡后捕获的效果，对于同一个事件，监听捕获和冒泡，分别对应相应的处理函数，监听到捕获事件，先暂缓执行，直到冒泡事件被捕获后再执行捕获之间。</p><h2 id="4、callee和caller的作用与区别"><a href="#4、callee和caller的作用与区别" class="headerlink" title="4、callee和caller的作用与区别"></a>4、callee和caller的作用与区别</h2><p>递归<br><br>我们可能用到一些函数调用自身，即递归。下面是一个计算阶乘的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;=<span class="number">1</span> ? <span class="number">1</span> : x*factorial(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现它很好的完成了我们的要求。可是还是存在一个问题，万一哪天有人重构这个函数改了函数名呢？修改不方便甚至漏改。</p><p><strong>arguments.callee</strong></p><p>使用callee 避免hard code 函数名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;=<span class="number">1</span> ? <span class="number">1</span> : x * <span class="built_in">arguments</span>.callee(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>callee是arguments对象的一个属性，指向 arguments 对象的函数，即当前函数。在例子中是XX。</li></ul><p><strong>caller</strong></p><p>函数对象的一个属性，指向调用当前函数的函数。比如 A() 调用 B()， 则在B()中 B.caller 指向A()。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(B.caller);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">B()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><ul><li>显然，只有当函数被调用时，该属性才会有值。不过当函数被全局调用时，该属性为null。</li></ul><p><strong>callee和caller结合</strong></p><p>我们刚才在函数B() 中使用了 B.caller 。跟上面递归一样，将来如果有人重构改了函数名呢？ 下面用刚才说的 arguments.callee 替换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee.caller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这是不是好多了。再执行A() ，发现跟刚才的输出一样。</p><h2 id="5、给history的replaceState和pushState行为添加监听事件"><a href="#5、给history的replaceState和pushState行为添加监听事件" class="headerlink" title="5、给history的replaceState和pushState行为添加监听事件"></a>5、给history的replaceState和pushState行为添加监听事件</h2><p>具体做法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _wr = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> orig = history[type];</span><br><span class="line">   <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> rv = orig.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      <span class="keyword">var</span> e = <span class="keyword">new</span> Event(type);</span><br><span class="line">       e.arguments = <span class="built_in">arguments</span>;</span><br><span class="line">       <span class="built_in">window</span>.dispatchEvent(e);</span><br><span class="line">       <span class="keyword">return</span> rv;</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"> history.pushState = _wr(<span class="string">'pushState'</span>);</span><br><span class="line"> history.replaceState = _wr(<span class="string">'replaceState'</span>);</span><br></pre></td></tr></table></figure><p>这样就创建了2个全新的事件，事件名为pushState和replaceState，我们就可以在全局监听：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'replaceState'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'THEY DID IT AGAIN! replaceState 111111'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'pushState'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'THEY DID IT AGAIN! pushState 2222222'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样就可以监听到pushState和replaceState行为。</p><h2 id="6、装饰器（Decorators）"><a href="#6、装饰器（Decorators）" class="headerlink" title="6、装饰器（Decorators）"></a>6、装饰器（Decorators）</h2><blockquote><p>我们知道继承模式是丰富子元素“内涵”的一种重要方式，不管是继承接口还是子类继承基类。而装饰者模式可以在不改变继承关系的前提下，包装先有的模块，使其内涵更加丰富，并不会影响到原来的功能。与继承相比，更加的灵活</p></blockquote><p><strong>(1)、类方法的装饰器</strong></p><p>下面来介绍一下用装饰器来修饰函数，首先来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temple;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span> was called!`</span>);</span><br><span class="line">  temple = target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</span><br><span class="line">    @log</span><br><span class="line">    foo() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Do something'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> P()</span><br><span class="line">p.foo()</span><br><span class="line"><span class="built_in">console</span>.log(P.prototype === temple) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>上述是实例方法foo中我们用log函数修饰，log函数接受三个参数，通过P.prototype === temple(target)可以判断，在类的实例函数的装饰器函数第一个参数为类的原型，第二个参数为函数名本身，第三个参数为该函数的描述属性。</p><p>具体总结如下，对于类的函数的装饰器函数，依次接受的参数为：</p><ul><li>target：如果修饰的是类的实例函数，那么target就是类的原型。如果修饰的是类的静态函数，那么target就是类本身。</li><li>key： 该函数的函数名。</li><li>descriptor：该函数的描述属性，比如 configurable、value、enumerable等。</li></ul><p>从上述的例子中我们可以看到，用装饰器来修饰相应的类的函数十分方便：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@log</span><br><span class="line">foo() &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>(2)、类的装饰器</strong></p><p>装饰函数也可以直接修饰类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temple</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(target);</span><br><span class="line">   temple = target</span><br><span class="line">&#125;</span><br><span class="line">@foo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> P();</span><br><span class="line">temple === P <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>当装饰函数直接修饰类的时候，装饰函数接受唯一的参数，这个参数就是该被修饰类本身。上述的例子中，输出的target就是类P的本身。</p><p>此外，在修饰类的时候，如果装饰函数有返回值，该返回值会重新定义这个类，也就是说当装饰函数有返回值时，其实是生成了一个新类，该新类通过返回值来定义。</p><p>举例来说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">target</span></span>&#123;</span><br><span class="line">      name = <span class="string">'Jony'</span>;</span><br><span class="line">      sayHello()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">"Hello "</span>+ <span class="keyword">this</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">@foo</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>()&#123;</span><br><span class="line">     </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> P();</span><br><span class="line">p.sayHello(); <span class="comment">// 会输出Hello Jony</span></span><br></pre></td></tr></table></figure><p>上面的例子可以看到，当装饰函数foo有返回值时，实际上P类已经被返回值所代表的新类所代替，因此P的实例p拥有sayHello方法。</p><p><strong>(3)、类的属性的装饰器</strong></p><p>下面我们来看类的属性的装饰器,装饰函数修饰类的属性时，在类实例化的时候调用属性的装饰函数，举例来说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">target,name</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"target is"</span>,target);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"name is"</span>,name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">   @foo</span><br><span class="line">   name = <span class="string">'Jony'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> P();</span><br><span class="line"><span class="comment">//会依次输出 target is f P()  name is Jony</span></span><br></pre></td></tr></table></figure><p>这里对于类的属性的装饰器函数接受两个参数，对于静态属性而言，第一个参数是类本身，对于实例属性而言，第一个参数是类的原型，第二个参数是指属性的名字。</p><p><strong>(4)、类函数参数的装饰器</strong></p><p>接着来看类函数参数的装饰器，类函数的参数装饰器可以修饰类的构建函数中的参数，以及类中其他普通函数中的参数。该装饰器在类的方法被调用的时候执行，下面来看实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">target,key,index</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"target is"</span>,target);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"key is"</span>,key);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"index is"</span>,index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">   test(@foo a)&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> P();</span><br><span class="line">p.test(<span class="string">"Hello Jony"</span>)</span><br><span class="line"><span class="comment">// 依次输出 f P() , test , 0</span></span><br></pre></td></tr></table></figure><p>类函数参数的装饰器函数接受三个参数，依次为类本身，类中该被修饰的函数本身，以及被修饰的参数在参数列表中的索引值。上述的例子中，会依次输出 f P() 、test和0。再次明确一下修饰函数参数的装饰器函数中的参数含义：</p><ul><li>target： 类本身</li><li>key：该参数所在的函数的函数名</li><li>index： 该参数在函数参数列表中的索引值</li></ul><p>从上面的Typescrit中在基类中常用的装饰器后，我们发现：</p><p><strong>装饰器可以起到分离复杂逻辑的功能，且使用上极其简单方便。与继承相比，也更加灵活，可以从装饰类，到装饰类函数的参数，可以说武装到了“牙齿”。</strong></p><h1 id="二、进阶javascript篇"><a href="#二、进阶javascript篇" class="headerlink" title="二、进阶javascript篇"></a>二、进阶javascript篇</h1><h2 id="1、自己实现一个bind函数"><a href="#1、自己实现一个bind函数" class="headerlink" title="1、自己实现一个bind函数"></a>1、自己实现一个bind函数</h2><p><strong>原理：通过apply或者call方法来实现。</strong></p><p>(1)初始版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">obj, arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> tmpArg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">newArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArgs = tmpArg.concat(<span class="built_in">Array</span>.prototype.slice.call(newArg))</span><br><span class="line">    <span class="keyword">return</span> context.apply(obj, newArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 考虑到原型链<br>为什么要考虑？因为在new 一个bind过生成的新函数的时候，必须的条件是要继承原函数的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">obj, arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> tmpArg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> newBind = <span class="function"><span class="keyword">function</span>(<span class="params">newArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArgs = tmpArg.concat(<span class="built_in">Array</span>.prototype.slice.call(newArg))</span><br><span class="line">    <span class="keyword">return</span> context.apply(obj, newArgs)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  F.prototype = context.prototype;</span><br><span class="line">  <span class="comment">//这里需要一个寄生组合继承</span></span><br><span class="line">  newBind.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> newBind</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、Macrotasks-和-Microtasks"><a href="#2、Macrotasks-和-Microtasks" class="headerlink" title="2、Macrotasks 和 Microtasks"></a>2、Macrotasks 和 Microtasks</h2><p>Macrotask 和 microtask 都是属于上述的异步任务中的一种，我们先看一下他们分别是哪些 API ：<br></p><ul><li><strong>macrotasks</strong>: <code>setTimeout</code>, <code>setInterval</code>, <code>setImmediate</code>, <code>I/O</code>, <code>UI rendering</code></li><li><strong>microtasks</strong>: <code>process.nextTick</code>, <code>Promises</code>, <code>Object.observe</code>(废弃), <code>MutationObserver</code></li></ul><p>&emsp;&emsp;<code>setTimeout</code> 的 macrotask ,和 <code>Promise</code> 的 microtask 有什么不同呢？ 我们通过下面的代码来展现他们的不同点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><p>在这里，<code>setTimeout</code>的延时为0，而<code>Promise.resolve()</code>也是返回一个被<code>resolve</code>了<code>promise</code>对象，即这里的<code>then</code>方法中的函数也是相当于异步的立即执行任务，那么他们到底是谁在前谁在后？<br></p><p>我们看看最终的运行结果（node 7.7.3)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"script start"</span></span><br><span class="line"><span class="string">"script end"</span></span><br><span class="line"><span class="string">"promise1"</span></span><br><span class="line"><span class="string">"promise2"</span></span><br><span class="line"><span class="string">"setTimeout"</span></span><br></pre></td></tr></table></figure><p>这里的运行结果是Promise的立即返回的异步任务会优先于setTimeout延时为0的任务执行。<br></p><p>原因是任务队列分为 macrotasks 和 microtasks，而Promise中的then方法的函数会被推入 microtasks 队列，而setTimeout的任务会被推入 macrotasks 队列。在每一次事件循环中，macrotask 只会提取一个执行，而 microtask 会一直提取，直到 microtasks 队列清空。<br></p><p><strong>注：一般情况下，macrotask queues 我们会直接称为 task queues，只有 microtask queues 才会特别指明。</strong><br></p><p>那么也就是说如果我的某个 microtask 任务又推入了一个任务进入 microtasks 队列，那么在主线程完成该任务之后，仍然会继续运行 microtasks 任务直到任务队列耗尽。<br></p><p><strong>而事件循环每次只会入栈一个 macrotask ，主线程执行完该任务后又会先检查 microtasks 队列并完成里面的所有任务后再执行 macrotask</strong></p><h2 id="3、手写实现Promise"><a href="#3、手写实现Promise" class="headerlink" title="3、手写实现Promise"></a>3、手写实现Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myPromise </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">excutor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">_this.status = <span class="string">'pending'</span>;</span><br><span class="line">_this.value = <span class="literal">undefined</span>;</span><br><span class="line">_this.reason = <span class="literal">undefined</span>;</span><br><span class="line">_this.onResolvedCallbacks = []; <span class="comment">// 存放then成功的回调</span></span><br><span class="line">_this.onRejectedCallbacks = []; <span class="comment">// 存放then失败的回调</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_this.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">_this.status = <span class="string">'resolved'</span>;</span><br><span class="line">_this.value = val;</span><br><span class="line"></span><br><span class="line">_this.onResolvedCallbacks.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">resolveFn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(resolveFn) &#123;</span><br><span class="line">resolveFn()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reasonValue</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_this.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">_this.status = <span class="string">'rejected'</span>;</span><br><span class="line">_this.reason = reasonValue;</span><br><span class="line"></span><br><span class="line">_this.onRejectedCallbacks.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rejectFn</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rejectFn) &#123;</span><br><span class="line">rejectFn()</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">excutor(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRjected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//成功和失败默认不传给一个函数，解决了问题8</span></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    onRjected = <span class="keyword">typeof</span> onRjected === <span class="string">'function'</span> ? onRjected : <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> promise2; <span class="comment">//返回的promise</span></span><br><span class="line">    <span class="keyword">if</span> (_this.status === <span class="string">'resolved'</span>) &#123;</span><br><span class="line">        promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 当成功或者失败执行时有异常那么返回的promise应该处于失败状态</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">// 根据规范让那俩家伙异步执行</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = onFulfilled(_this.value);<span class="comment">//这里解释过了</span></span><br><span class="line">                    <span class="comment">// 写一个方法统一处理问题1-7</span></span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_this.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">        promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = onRjected(_this.reason);</span><br><span class="line">                    resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                    reject(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_this.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">        promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            _this.onResolvedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onFulfilled(_this.value);</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">            _this.onRejectedCallbacks.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = onRjected(_this.reason);</span><br><span class="line">                        resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                        reject(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接受四个参数，新Promise、返回值，成功和失败的回调</span></span><br><span class="line">    <span class="comment">// 有可能这里返回的x是别人的promise</span></span><br><span class="line">    <span class="comment">// 尽可能允许其他乱写</span></span><br><span class="line">    <span class="keyword">if</span> (promise2 === x) &#123; <span class="comment">//这里应该报一个类型错误，来解决问题4</span></span><br><span class="line">        <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用了'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 看x是不是一个promise,promise应该是一个对象</span></span><br><span class="line">    <span class="keyword">let</span> called; <span class="comment">// 表示是否调用过成功或者失败，用来解决问题7</span></span><br><span class="line">    <span class="comment">//下面判断上一次then返回的是普通值还是函数，来解决问题1、2</span></span><br><span class="line">    <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123;</span><br><span class="line">        <span class="comment">// 可能是promise &#123;&#125;,看这个对象中是否有then方法，如果有then我就认为他是promise了</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.then;<span class="comment">// 保存一下x的then方法</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="comment">// 成功</span></span><br><span class="line">                <span class="comment">//这里的y也是官方规范，如果还是promise，可以当下一次的x使用</span></span><br><span class="line">                <span class="comment">//用call方法修改指针为x，否则this指向window</span></span><br><span class="line">                then.call(x, <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span> <span class="comment">//如果调用过就return掉</span></span><br><span class="line">                    called = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">// y可能还是一个promise，在去解析直到返回的是一个普通值</span></span><br><span class="line">                    resolvePromise(promise2, y, resolve, reject)<span class="comment">//递归调用，解决了问题6</span></span><br><span class="line">                &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">//失败</span></span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">                    called = <span class="literal">true</span></span><br><span class="line">                    reject(err);</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(x)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 说明是一个普通值1</span></span><br><span class="line">        resolve(x); <span class="comment">// 表示成功了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、Function-proto-getPrototypeOf-是什么？"><a href="#4、Function-proto-getPrototypeOf-是什么？" class="headerlink" title="4、Function.proto(getPrototypeOf)是什么？"></a>4、Function.<em>proto</em>(getPrototypeOf)是什么？</h2><p>获取一个对象的原型，在chrome中可以通过<strong>proto</strong>的形式，或者在ES6中可以通过Object.getPrototypeOf的形式。<br></p><p>那么Function.proto是什么么？也就是说Function由什么对象继承而来，我们来做如下判别。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.__proto__==<span class="built_in">Object</span>.prototype <span class="comment">//false</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__.__proto__==<span class="built_in">Object</span>.prototype <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Function</span>.__proto__==<span class="built_in">Function</span>.prototype<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>我们发现Function的原型也是Function。<br></p><p>我们用图可以来明确这个关系：</p><p><img src="/images/jsImg_1.png"></p><ul><li>此处借图于[<a href="https://juejin.im/post/5b44a485e51d4519945fb6b7" target="_blank" rel="noopener">https://juejin.im/post/5b44a485e51d4519945fb6b7</a>]</li></ul><h2 id="5、观察者或订阅模式的简单实现"><a href="#5、观察者或订阅模式的简单实现" class="headerlink" title="5、观察者或订阅模式的简单实现"></a>5、观察者或订阅模式的简单实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Events</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on=<span class="function"><span class="keyword">function</span>(<span class="params">eventName,callBack</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.handles)&#123;</span><br><span class="line">    <span class="keyword">this</span>.handles=&#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.handles[eventName])&#123;</span><br><span class="line">    <span class="keyword">this</span>.handles[eventName]=[];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.handles[eventName].push(callBack);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.emit=<span class="function"><span class="keyword">function</span>(<span class="params">eventName,obj</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.handles[eventName])&#123;</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;o&lt;<span class="keyword">this</span>.handles[eventName].length;i++)&#123;</span><br><span class="line">       <span class="keyword">this</span>.handles[eventName][i](obj);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就定义了Events，现在我们可以开始来调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> events=<span class="keyword">new</span> Events();</span><br><span class="line">events.on(<span class="string">'say'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'Hello'</span>,nama)</span><br><span class="line">&#125;);</span><br><span class="line">events.emit(<span class="string">'say'</span>,<span class="string">'Jony yu'</span>);</span><br><span class="line"><span class="comment">//结果就是通过emit调用之后，输出了Jony yu</span></span><br></pre></td></tr></table></figure><h1 id="三、http、html和浏览器篇"><a href="#三、http、html和浏览器篇" class="headerlink" title="三、http、html和浏览器篇"></a>三、http、html和浏览器篇</h1><h2 id="1、http和https"><a href="#1、http和https" class="headerlink" title="1、http和https"></a>1、http和https</h2><p>https的SSL加密是在传输层实现的。</p><p><strong>(1)http和https的基本概念</strong></p><ul><li><p>http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p></li><li><p>https: 是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p></li><li><p>https协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。</p></li></ul><p><strong>(2)http和https的区别？</strong></p><ul><li><p>http传输的数据都是未加密的，也就是明文的，网景公司设置了SSL协议来对http协议传输的数据进行加密处理，简单来说https协议是由http和ssl协议构建的可进行加密传输和身份认证的网络协议，比http协议的安全性更高。<br>主要的区别如下：</p></li><li><p>Https协议需要ca证书，费用较高。</p></li><li><p>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</p></li><li><p>使用不同的链接方式，端口也不同，一般而言，http协议的端口为80，https的端口为443</p></li><li><p>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</p></li></ul><p><strong>(3)https协议的工作原理</strong></p><p>客户端在使用HTTPS方式与Web服务器通信时有以下几个步骤。</p><ul><li><p>客户使用https url访问服务器，则要求web 服务器建立ssl链接。</p></li><li><p>web服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），返回或者说传输给客户端。</p></li><li><p>客户端和web服务器端开始协商SSL链接的安全等级，也就是加密等级。</p></li><li><p>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。</p></li><li><p>web服务器通过自己的私钥解密出会话密钥。</p></li><li><p>web服务器通过会话密钥加密与客户端之间的通信。</p></li></ul><p><strong>(4)https协议的优点</strong></p><ul><li><p>使用HTTPS协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；</p></li><li><p>HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，要比http协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。</p></li><li><p>HTTPS是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p></li><li><p>谷歌曾在2014年8月份调整搜索引擎算法，并称“比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中的排名将会更高”。</p></li></ul><p><strong>(5)https协议的缺点</strong></p><ul><li><p>https握手阶段比较费时，会使页面加载时间延长50%，增加10%~20%的耗电。</p></li><li><p>https缓存不如http高效，会增加数据开销。</p></li><li><p>SSL证书也需要钱，功能越强大的证书费用越高。</p></li><li><p>SSL证书需要绑定IP，不能再同一个ip上绑定多个域名，ipv4资源支持不了这种消耗。</p></li></ul><h2 id="2、http2-0"><a href="#2、http2-0" class="headerlink" title="2、http2.0"></a>2、http2.0</h2><p>首先补充一下，http和https的区别，相比于http,https是基于ssl加密的http协议<br>简要概括：http2.0是基于1999年发布的http1.0之后的首次更新。</p><ul><li>提升访问速度（可以对于，请求资源所需时间更少，访问速度更快，相比http1.0）</li><li>允许多路复用：多路复用允许同时通过单一的HTTP/2连接发送多重请求-响应信息。改善了：在http1.1中，浏览器客户端在同一时间，针对同一域名下的请求有一定数量限制（连接数量），超过限制会被阻塞。</li><li>二进制分帧：HTTP2.0会将所有的传输信息分割为更小的信息或者帧，并对他们进行二进制编码</li><li>首部压缩</li><li>服务器端推送</li></ul><h2 id="3、一个图片url访问后直接下载怎样实现？"><a href="#3、一个图片url访问后直接下载怎样实现？" class="headerlink" title="3、一个图片url访问后直接下载怎样实现？"></a>3、一个图片url访问后直接下载怎样实现？</h2><p>请求的返回头里面，用于浏览器解析的重要参数就是OSS的API文档里面的返回http头，决定用户下载行为的参数。</p><p>下载的情况下：</p><figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. x-oss-object-type:</span><br><span class="line">       <span class="attribute">Normal</span></span><br><span class="line">2. x-oss-request-id:</span><br><span class="line">       <span class="attribute">598D5ED34F29D01FE2925F41</span></span><br><span class="line">3. x-oss-storage-class:</span><br><span class="line">       <span class="attribute">Standard</span></span><br></pre></td></tr></table></figure><h2 id="4、iframe是什么？有什么缺点？"><a href="#4、iframe是什么？有什么缺点？" class="headerlink" title="4、iframe是什么？有什么缺点？"></a>4、iframe是什么？有什么缺点？</h2><p>定义：iframe元素会创建包含另一个文档的内联框架<br>提示：可以将提示文字放在之间，来提示某些不支持iframe的浏览器</p><p>缺点：</p><ul><li><p>会阻塞主页面的onload事件</p></li><li><p>搜索引擎无法解读这种页面，不利于SEO（search engine optimization） <strong>搜索引擎优化</strong></p></li><li><p>iframe和主页面共享连接池，而浏览器对相同区域有限制所以会影响性能。</p></li></ul><h2 id="5、Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#5、Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="5、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>5、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h2><p>Doctype声明于文档最前面，告诉浏览器以何种方式来渲染页面，这里有两种模式，严格模式和混杂模式。</p><ul><li><p>严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行。</p></li><li><p>混杂模式，向后兼容，模拟老式浏览器，防止浏览器无法兼容页面。</p></li></ul><h2 id="6、Cookie如何防范XSS攻击"><a href="#6、Cookie如何防范XSS攻击" class="headerlink" title="6、Cookie如何防范XSS攻击"></a>6、Cookie如何防范XSS攻击</h2><p>XSS（跨站脚本攻击）是指攻击者在返回的HTML中嵌入javascript脚本，为了减轻这些攻击，需要在HTTP头部配上，set-cookie：</p><ul><li><p>httponly-这个属性可以防止XSS,它会禁止javascript脚本来访问cookie。</p></li><li><p>secure - 这个属性告诉浏览器仅在请求为https的时候发送cookie。</p></li></ul><p>结果应该是这样的：Set-Cookie=…..</p><h2 id="7、viewport和移动端布局"><a href="#7、viewport和移动端布局" class="headerlink" title="7、viewport和移动端布局"></a>7、viewport和移动端布局</h2><p>看了小姐姐的文章挺好的：</p><p><a href="https://github.com/forthealllight/blog/issues/13" target="_blank" rel="noopener">响应式布局的常用解决方案对比(媒体查询、百分比、rem和vw/vh）</a></p><h1 id="四、CSS相关"><a href="#四、CSS相关" class="headerlink" title="四、CSS相关"></a>四、CSS相关</h1><h2 id="1、画一条0-5px的线"><a href="#1、画一条0-5px的线" class="headerlink" title="1、画一条0.5px的线"></a>1、画一条0.5px的线</h2><ul><li><p>采用meta viewport的方式</p></li><li><p>采用 border-image的方式</p></li><li><p>采用transform: scale()的方式</p></li></ul><h2 id="2、link标签和import标签的区别"><a href="#2、link标签和import标签的区别" class="headerlink" title="2、link标签和import标签的区别"></a>2、link标签和import标签的区别</h2><ul><li><p>link属于html标签，而@import是css提供的</p></li><li><p>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</p></li><li><p>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</p></li><li><p>link方式样式的权重高于@import的。</p></li></ul><h2 id="3、多行元素的文本省略号"><a href="#3、多行元素的文本省略号" class="headerlink" title="3、多行元素的文本省略号"></a>3、多行元素的文本省略号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span></span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span><span class="selector-pseudo">:vertical</span></span><br><span class="line"><span class="selector-tag">-web-line-clamp</span><span class="selector-pseudo">:3</span></span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试题类目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题类目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IOC设计理念</title>
      <link href="/2019/01/04/IOC%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/"/>
      <url>/2019/01/04/IOC%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-IoC"><a href="#什么是-IoC" class="headerlink" title="什么是 IoC"></a>什么是 IoC</h1><p><code>IoC</code> 的全称叫做 <code>Inversion of Control</code>，可翻译为为「<strong>控制反转</strong>」或「<strong>依赖倒置</strong>」，它主要包含了三个准则：</p><blockquote><p>   1、高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象<br>   2、抽象不应该依赖于具体实现，具体实现应该依赖于抽象<br>   3、面向接口编程 而不要面向实现编程</p></blockquote><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><hr><p>所谓的依赖注入，简单来说就是把高层模块所依赖的模块通过传参的方式把依赖「注入」到模块内部，上面的代码可以通过依赖注入的方式改造成如下方式：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">        <span class="keyword">this</span>.router = options.router;</span><br><span class="line">        <span class="keyword">this</span>.track = options.track;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.router.to(<span class="string">'home'</span>);</span><br><span class="line">            <span class="keyword">this</span>.track.tracking();</span><br><span class="line">            <span class="keyword">this</span>.options.onReady();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">    router: <span class="keyword">new</span> Router(),</span><br><span class="line">    track: <span class="keyword">new</span> Track(),</span><br><span class="line">    onReady() &#123;</span><br><span class="line">        <span class="comment">// do something here...</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是如果产品说再加个分享功能，肯定要再加个<code>this.share = options.share</code>,这明显不是我们所期望的。</p><p>看下面的代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> modules = []</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.initModules();</span><br><span class="line">            <span class="keyword">this</span>.options.onReady(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> use(<span class="built_in">module</span>) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray(<span class="built_in">module</span>) ? <span class="built_in">module</span>.map(<span class="function"><span class="params">item</span> =&gt;</span> App.use(item)) : App.modules.push(<span class="built_in">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initModules() &#123;</span><br><span class="line">        App.modules.map(<span class="function"><span class="params">module</span> =&gt;</span> <span class="built_in">module</span>.init &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.init == <span class="string">'function'</span> &amp;&amp; <span class="built_in">module</span>.init(<span class="keyword">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过改造后 <code>App</code> 内已经没有「具体实现」了，看不到任何业务代码了，那么如何使用 <code>App</code> 来管理我们的依赖呢：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/Router.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'path/to/Router'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    init(app) &#123;</span><br><span class="line">        app.router = <span class="keyword">new</span> Router(app.options.router);</span><br><span class="line">        app.router.to(<span class="string">'home'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// modules/Track.js</span></span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'path/to/Track'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    init(app) &#123;</span><br><span class="line">        app.track = <span class="keyword">new</span> Track(app.options.track);</span><br><span class="line">        app.track.tracking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line">App.use([Router, Track]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">    router: &#123;</span><br><span class="line">        mode: <span class="string">'history'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    track: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onReady(app) &#123;</span><br><span class="line">        <span class="comment">// app.options ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样通过注入到modules里初始化，将 <code>App</code> 的this传入modules注入的方法中，实现绑定到 <code>App</code> 的对象上</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p><code>App</code> 模块此时应该称之为「容器」比较合适了，跟业务已经没有任何关系了，它仅仅只是提供了一些方法来辅助管理注入的依赖和控制模块如何执行。<br>控制反转（<code>Inversion of Control</code>）是一种「思想」，依赖注入（<code>Dependency Injection</code>）则是这一思想的一种具体「实现方式」，而这里的 <code>App</code> 则是辅助依赖管理的一个「容器」。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用的css reset</title>
      <link href="/2018/12/12/%E5%B8%B8%E7%94%A8%E7%9A%84css-reset/"/>
      <url>/2018/12/12/%E5%B8%B8%E7%94%A8%E7%9A%84css-reset/</url>
      
        <content type="html"><![CDATA[<h1 id="常用的css-reset"><a href="#常用的css-reset" class="headerlink" title="常用的css reset"></a>常用的css reset</h1><h2 id="雅虎工程师提供的CSS初始化示例代码"><a href="#雅虎工程师提供的CSS初始化示例代码" class="headerlink" title="雅虎工程师提供的CSS初始化示例代码"></a>雅虎工程师提供的CSS初始化示例代码</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">code</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background</span>:<span class="number">#fff</span>; <span class="attribute">color</span>:<span class="number">#555</span>; <span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-family</span>: Verdana, Arial, Helvetica, sans-serif; &#125;</span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span>,<span class="selector-tag">caption</span> &#123; <span class="attribute">font-size</span>:<span class="number">14px</span>; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123; <span class="attribute">font-weight</span>:normal; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; <span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>:<span class="number">#555</span>; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">select</span>, <span class="selector-tag">button</span> &#123; <span class="attribute">font</span>:<span class="number">14px</span> Verdana,Helvetica,Arial,sans-serif; &#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; &#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">overflow-y</span>: scroll;&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">"."</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>:<span class="number">0</span>; <span class="attribute">clear</span>:both; <span class="attribute">visibility</span>: hidden;&#125;</span><br><span class="line">.clearfix &#123; *zoom:1; &#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="腾讯官网-样式初始化"><a href="#腾讯官网-样式初始化" class="headerlink" title="腾讯官网 样式初始化"></a>腾讯官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">select</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125; </span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span><span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>,HELVETICA;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">-webkit-text-size-adjust</span>:<span class="number">100%</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#2d374b</span>;<span class="attribute">text-decoration</span>:none&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#cd0200</span>;<span class="attribute">text-decoration</span>:underline&#125; </span><br><span class="line"><span class="selector-tag">em</span>&#123;<span class="attribute">font-style</span>:normal&#125; </span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none&#125; </span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">vertical-align</span>:middle&#125; </span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125; </span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">word-wrap</span>:break-word&#125;</span><br></pre></td></tr></table></figure><h2 id="新浪官网-样式初始化"><a href="#新浪官网-样式初始化" class="headerlink" title="新浪官网 样式初始化"></a>新浪官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">img</span>,<span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">border</span>:<span class="number">0</span>;&#125; </span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">margin-top</span>:<span class="number">5px</span>;<span class="attribute">font-family</span>:<span class="string">"SimSun"</span>,<span class="string">"宋体"</span>,<span class="string">"Arial Narrow"</span>;&#125; </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">list-style-type</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">select</span>,<span class="selector-tag">input</span>,<span class="selector-tag">img</span>,<span class="selector-tag">select</span>&#123;<span class="attribute">vertical-align</span>:middle;&#125; </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>:<span class="number">#009</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#800080</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">color</span>:<span class="number">#c00</span>;<span class="attribute">text-decoration</span>:underline;&#125;</span><br></pre></td></tr></table></figure><h2 id="淘宝官网-样式初始化"><a href="#淘宝官网-样式初始化" class="headerlink" title="淘宝官网 样式初始化"></a>淘宝官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">hr</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125; </span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125; </span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125; </span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125; </span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">pre</span>, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125; </span><br><span class="line"><span class="selector-tag">small</span>&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125; </span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125; </span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125; </span><br><span class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125; </span><br><span class="line"><span class="selector-tag">sub</span>&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125; </span><br><span class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125; </span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125; </span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">select</span>, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125; </span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="网易官网-样式初始化"><a href="#网易官网-样式初始化" class="headerlink" title="网易官网 样式初始化"></a>网易官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">overflow-y</span>:scroll;&#125; </span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">29px</span>00; <span class="attribute">font</span>:<span class="number">12px</span><span class="string">"\5B8B\4F53"</span>,sans-serif;<span class="attribute">background</span>:<span class="number">#ffffff</span>;&#125; </span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">pre</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>; <span class="attribute">margin</span>:<span class="number">0</span>;&#125; </span><br><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">tr</span>,<span class="selector-tag">th</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125; </span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style-type</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:top;<span class="attribute">border</span>:<span class="number">0</span>;&#125; </span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span> &#123;<span class="attribute">list-style</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">font-weight</span>:normal;&#125; </span><br><span class="line"><span class="selector-tag">address</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">code</span>,<span class="selector-tag">em</span>,<span class="selector-tag">th</span> &#123;<span class="attribute">font-weight</span>:normal; <span class="attribute">font-style</span>:normal;&#125;</span><br></pre></td></tr></table></figure><h2 id="admin10000-com-的html模板，用于每次新开发页面使用。"><a href="#admin10000-com-的html模板，用于每次新开发页面使用。" class="headerlink" title="admin10000.com 的html模板，用于每次新开发页面使用。"></a>admin10000.com 的html模板，用于每次新开发页面使用。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">title</span>&gt;</span>网站标题 - Admin10000.com <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Language"</span> <span class="attr">content</span>=<span class="string">"zh-CN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Author"</span> <span class="attr">content</span>=<span class="string">"网页作者"</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"Copyright"</span> <span class="attr">content</span>=<span class="string">"网站版权"</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"网站关键字"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"网站描述"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"Shortcut Icon"</span> <span class="attr">href</span>=<span class="string">"网站.ico图标路径"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS文件路径"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"JS文件路径"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue面试题</title>
      <link href="/2018/11/29/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/11/29/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 面试题类目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题类目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react面试题</title>
      <link href="/2018/11/29/react%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/11/29/react%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1、dispatch触发action，react视图更新过程"><a href="#1、dispatch触发action，react视图更新过程" class="headerlink" title="1、dispatch触发action，react视图更新过程"></a>1、dispatch触发action，react视图更新过程</h1><blockquote><p>当我们dispatch 一个 action 的时候， 调用的其实是 store.dispatch，这个都没问题，store.dispatch 会去跑一遍所有注册在 <code>createStore</code> 中的 reducer， 找到对应的 type 更新数据，返回一个新的 state。</p></blockquote>   <a id="more"></a><pre><code>而我们的组件想拿到 store 的数据必须通过 `connect(mapStateToProps, mapDispatchToProps)(App)` 像这样，react-redux 中的 Connect 组件会在 `componengDidMount` 的时候去 调用 一个 `trySubscribe` 的方法，其内部调用 `store.subscrib`e 去订阅一个 handleChange 的方法。所以当你 dispatch action 的时候，就会触发 Connect 组件中的方法， Connect 组件中也维护了一个叫做 `storeState` 的 state，每次拿到新的 sotre 就去调用 setState， 触发 render 函数， render 函数会根据你 connect 中传入的 mapStateToProps， mapDispatchToProps，包括可选参数 mergeProps， 去做一个 props 的合并动作， 最终在 Connect 组件内部 return 出来一个 `createElement(WrappedComponent,this.mergedProps)` 这样的东西，而 createElement 第二个参数就是你组件的 props， 那么每次 props 变了，就会驱动视图的更新。这就是 Redux 其中的中做原理。</code></pre><h1 id="2、redux中间件"><a href="#2、redux中间件" class="headerlink" title="2、redux中间件"></a>2、redux中间件</h1><blockquote><p>中间件提供第三方插件的模式，自定义拦截 action -&gt; reducer 的过程。变为 action -&gt; middlewares -&gt; reducer 。这种机制可以让我们改变数据流，实现如异步 action ，action 过滤，日志输出，异常报告等功能。<br>        常见的中间件：<br>        redux-logger：提供日志输出<br>        redux-thunk：处理异步操作<br>        redux-promise：处理异步操作，actionCreator的返回值是promise</p></blockquote><h1 id="3、redux有什么缺点"><a href="#3、redux有什么缺点" class="headerlink" title="3、redux有什么缺点"></a>3、redux有什么缺点</h1><blockquote><p>1.一个组件所需要的数据，必须由父组件传过来，而不能像flux中直接从store取。<br>2.当一个组件相关数据更新时，即使父组件不需要用到这个组件，父组件还是会重新render，可能会有效率影响，或者需要写复杂的shouldComponentUpdate进行判断。</p></blockquote><h1 id="4、react组件的划分业务组件技术组件？"><a href="#4、react组件的划分业务组件技术组件？" class="headerlink" title="4、react组件的划分业务组件技术组件？"></a>4、react组件的划分业务组件技术组件？</h1><blockquote><p>根据组件的职责通常把组件分为UI组件和容器组件。</p><p>UI 组件负责 UI 的呈现，容器组件负责管理数据和逻辑。</p><p>两者通过React-Redux 提供connect方法联系起来。</p></blockquote><p>具体使用可以参照如下链接：<br>[<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html</a>]</p><h1 id="5、为什么虚拟dom会提高性能"><a href="#5、为什么虚拟dom会提高性能" class="headerlink" title="5、为什么虚拟dom会提高性能?"></a>5、为什么虚拟dom会提高性能?</h1><blockquote><p>虚拟dom相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的dom操作，从而提高性能</p></blockquote><p>具体实现步骤如下：<br>    用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中<br>    当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。</p><p>参考链接：</p><p>[<a href="https://www.zhihu.com/question/29504639?sort=created" target="_blank" rel="noopener">https://www.zhihu.com/question/29504639?sort=created</a>]</p><h1 id="6、diff算法"><a href="#6、diff算法" class="headerlink" title="6、diff算法?"></a>6、diff算法?</h1><p>把树形结构按照层级分解，只比较同级元素。<br>给列表结构的每个单元添加唯一的key属性，方便比较。<br>React 只会匹配相同 class 的 component（这里面的class指的是组件的名字）合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.<br>选择性子树渲染。开发人员可以重写shouldComponentUpdate提高diff的性能。</p><p>参考链接：</p><p>[https//segmentfault.com/a/1190000000606216]</p><h1 id="7、react性能优化方案"><a href="#7、react性能优化方案" class="headerlink" title="7、react性能优化方案"></a>7、react性能优化方案</h1><p> (1）重写shouldComponentUpdate来避免不必要的dom操作。</p><p>（2）使用 production 版本的react.js。</p><p>（3）使用key来帮助React识别列表中所有子组件的最小变化。</p><p>参考链接：</p><p>[<a href="https://segmentfault.com/a/1190000006254212" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006254212</a>]</p>]]></content>
      
      
      <categories>
          
          <category> 面试题类目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题类目 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac中使用生成项目结构图tree</title>
      <link href="/2018/11/29/mac%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BEtree/"/>
      <url>/2018/11/29/mac%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BEtree/</url>
      
        <content type="html"><![CDATA[<h1 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h1><blockquote><p>Mac 的话是没有自带tree命令的，但是我们可以通过homebrew（如果你不知道它的话，这是官网）安装：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">brew install tree</span><br></pre></td></tr></table></figure><blockquote><p>然后等待安装完成后</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tree --version# 查看是否安装成功</span><br><span class="line">tree --help# 查看帮助</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="中文Api"><a href="#中文Api" class="headerlink" title="中文Api"></a>中文Api</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-a 显示所有文件和目录。</span><br><span class="line">-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</span><br><span class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">-d 显示目录名称而非内容。</span><br><span class="line">-D 列出文件或目录的更改时间。</span><br><span class="line">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class="line">-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上<span class="string">"*"</span>,<span class="string">"/"</span>,<span class="string">"="</span>,<span class="string">"@"</span>,<span class="string">"|"</span>号。</span><br><span class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class="line">-i 不以阶梯状列出文件或目录名称。</span><br><span class="line">-I 不显示符合范本样式的文件或目录名称。</span><br><span class="line">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class="line">-n 不在文件和目录清单加上色彩。</span><br><span class="line">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class="line">-p 列出权限标示。</span><br><span class="line">-P 只显示符合范本样式的文件或目录名称。</span><br><span class="line">-q 用<span class="string">"?"</span>号取代控制字符，列出文件和目录名称。</span><br><span class="line">-s 列出文件或目录大小。</span><br><span class="line">-t 用文件和目录的更改时间排序。</span><br><span class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br></pre></td></tr></table></figure><h1 id="Used"><a href="#Used" class="headerlink" title="Used"></a>Used</h1><blockquote><p>下面是我生成上面的结构所用的命令，大家可以参考下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -I <span class="string">'node_modules|dist|*.mp3|*.jpg'</span> -f</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mpvue入手及遇到的坑点</title>
      <link href="/2018/11/29/mpvue%E5%85%A5%E6%89%8B%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E7%82%B9/"/>
      <url>/2018/11/29/mpvue%E5%85%A5%E6%89%8B%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于未接触过<code>小程序</code>的我来说，想起手做个小程序还是要费点时间去学习，但是<code>mpvue</code>的出现让我提起了做小程序的兴趣。从而我的第一个小程序就这么从<code>mpvue</code>中摸爬滚打中开始了</p><a id="more"></a><h2 id="mpvue"><a href="#mpvue" class="headerlink" title="mpvue"></a>mpvue</h2><blockquote><p>mpvue是什么，是一个利用vue的runtime和compiler将vue类型文件的代码通过webpack打包转译成小程序的代码。</p></blockquote><p>让我们先从如何获取一个<code>mpvue</code>脚手架开始起步吧</p><p>首先准备好node，然后在命令行中执行以下命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 1. 先检查下 Node.js 是否安装成功</span><br><span class="line">$ node -v</span><br><span class="line">v8<span class="number">.9</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">$ npm -v</span><br><span class="line"><span class="number">5.6</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"># 2. 由于众所周知的原因，可以考虑切换源为 taobao 源</span><br><span class="line">$ npm set registry https:<span class="comment">//registry.npm.taobao.org/</span></span><br><span class="line"></span><br><span class="line"># 3. 全局安装 vue-cli</span><br><span class="line"># 一般是要 sudo 权限的</span><br><span class="line">$ npm install --global vue-cli@<span class="number">2.9</span></span><br><span class="line"></span><br><span class="line"># 4. 创建一个基于 mpvue-quickstart 模板的新项目</span><br><span class="line"># 新手一路回车选择默认就可以了</span><br><span class="line">$ vue init mpvue/mpvue-quickstart my-project</span><br><span class="line"></span><br><span class="line"># 5. 安装依赖，走你</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><ul><li><p>依次执行上面的命令，到最后安装好所以依赖，执行<code>npm run dev</code>这时候本地服务就启动了，项目目录中会多出个dist目录了。</p></li><li><p>上面是摘自:       mpvue文档[<a href="http://mpvue.com/mpvue/quickstart/#3-mpvue" target="_blank" rel="noopener">http://mpvue.com/mpvue/quickstart/#3-mpvue</a>]</p></li><li>剩下的不多说小伙伴们直接去官方文档看就好了，只介绍个起步，下面我们将开始讲述我mpvue的开发过程</li></ul><h2 id="mpvue开发的框架图"><a href="#mpvue开发的框架图" class="headerlink" title="mpvue开发的框架图"></a>mpvue开发的框架图</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">├── ./README.md</span><br><span class="line">├── ./build</span><br><span class="line">│   ├── ./build/build.js</span><br><span class="line">│   ├── ./build/check-versions.js</span><br><span class="line">│   ├── ./build/dev-client.js</span><br><span class="line">│   ├── ./build/dev-server.js</span><br><span class="line">│   ├── ./build/devbuild.js</span><br><span class="line">│   ├── ./build/prod-server.js</span><br><span class="line">│   ├── ./build/utils.js</span><br><span class="line">│   ├── ./build/vue-loader.conf.js</span><br><span class="line">│   ├── ./build/webpack.base.conf.js</span><br><span class="line">│   ├── ./build/webpack.dev.conf.js</span><br><span class="line">│   ├── ./build/webpack.devprod.config.js</span><br><span class="line">│   ├── ./build/webpack.prod.conf.js</span><br><span class="line">│   └── ./build/webpack.prodserver.config.js</span><br><span class="line">├── ./config</span><br><span class="line">│   ├── ./config/dev.env.js</span><br><span class="line">│   ├── ./config/index.js</span><br><span class="line">│   └── ./config/prod.env.js</span><br><span class="line">├── ./index.html</span><br><span class="line">├── ./package-lock.json</span><br><span class="line">├── ./package.json</span><br><span class="line">├── ./project.config.json</span><br><span class="line">├── ./src</span><br><span class="line">│   ├── ./src/App.vue</span><br><span class="line">│   ├── ./src/app.json</span><br><span class="line">│   ├── ./src/main.js</span><br><span class="line">│   ├── ./src/components</span><br><span class="line">│   │   ├── ./src/components/addRecord.vue</span><br><span class="line">│   ├── ./src/config</span><br><span class="line">│   │   └── ./src/config/apiconfig</span><br><span class="line">│   │       └── ./src/config/apiconfig/config.js</span><br><span class="line">│   ├── ./src/fetchData</span><br><span class="line">│   │   ├── ./src/fetchData/fetchDiscover.js</span><br><span class="line">│   ├── ./src/http</span><br><span class="line">│   │   ├── ./src/http/api.js</span><br><span class="line">│   │   └── ./src/http/config.js</span><br><span class="line">│   ├── ./src/main.js</span><br><span class="line">│   ├── ./src/pages</span><br><span class="line">│   │   └── ./src/pages/searchlist</span><br><span class="line">│   │       ├── ./src/pages/searchlist/component</span><br><span class="line">│   │       │   ├── ./src/pages/searchlist/component/courts.vue</span><br><span class="line">│   │       │   ├── ./src/pages/searchlist/component/goodsType.vue</span><br><span class="line">│   │       │   ├── ./src/pages/searchlist/component/priceRange.vue</span><br><span class="line">│   │       │   └── ./src/pages/searchlist/component/sortView.vue</span><br><span class="line">│   │       ├── ./src/pages/searchlist/index.vue</span><br><span class="line">│   │       ├── ./src/pages/searchlist/main.js</span><br><span class="line">│   │       └── ./src/pages/searchlist/main.json</span><br><span class="line">│   ├── ./src/store</span><br><span class="line">│   │   ├── ./src/store/actions.js</span><br><span class="line">│   │   ├── ./src/store/getters.js</span><br><span class="line">│   │   ├── ./src/store/mutaions.js</span><br><span class="line">│   │   ├── ./src/store/mutation-type.js</span><br><span class="line">│   │   └── ./src/store/store.js</span><br><span class="line">│   └── ./src/utils</span><br><span class="line">│       ├── ./src/utils/data</span><br><span class="line">│       │   ├── ./src/utils/data/city.js</span><br><span class="line">│       │   ├── ./src/utils/data/discoverData.js</span><br><span class="line">│       │   ├── ./src/utils/data/handleUtils.js</span><br><span class="line">│       │   ├── ./src/utils/data/mincity.js</span><br><span class="line">│       │   └── ./src/utils/data/region.json</span><br><span class="line">│       ├── ./src/utils/style</span><br><span class="line">│       │   ├── ./src/utils/style/common.css</span><br><span class="line">│       │   └── ./src/utils/style/mixin.css</span><br><span class="line">│       └── ./src/utils/tipUtil</span><br><span class="line">│           └── ./src/utils/tipUtil/tips.js</span><br><span class="line">└── ./<span class="keyword">static</span></span><br><span class="line">    ├── ./<span class="keyword">static</span>/images</span><br><span class="line">    │   ├── ./<span class="keyword">static</span>/images/default_pic.png</span><br><span class="line">    ├── ./<span class="keyword">static</span>/iview</span><br><span class="line">    │   ├── ./<span class="keyword">static</span>/iview/action-sheet</span><br><span class="line">    │   │   ├── ./<span class="keyword">static</span>/iview/action-sheet/index.js</span><br><span class="line">    │   │   ├── ./<span class="keyword">static</span>/iview/action-sheet/index.json</span><br><span class="line">    │   │   ├── ./<span class="keyword">static</span>/iview/action-sheet/index.wxml</span><br><span class="line">    │   │   └── ./<span class="keyword">static</span>/iview/action-sheet/index.wxss</span><br><span class="line">    └── ./<span class="keyword">static</span>/weui</span><br><span class="line">        └── ./<span class="keyword">static</span>/weui/weui.css</span><br></pre></td></tr></table></figure><ul><li><p>上线流程图中我们先分析下结构，build和config目录是存放webpack配置文件的，有需要特殊配置的小伙伴自行修改配置即可。</p></li><li><p>剩下的的就是src和static目录，初期构建出来的项目并没有static目录，但是能知道它的作用存放静态文件的,具体后面讲。</p></li><li><p>index.html是作为解析mpvue入口html文件</p></li><li><p>project.config.json这个文件是用来设置小程序开发工具设置和appid的配置文件</p></li><li><p>再到src目录，components存放vue组件，config和http是封装请求方法的，utils是存放公共方法类文件的，pages是存放页面级文件的，每个page里有三个文件，分别是index.vue、main.js、main.json。</p></li><li><p>src里有三个文件，main.js、App.vue,这两个分别对应vue框架中的入口js文件和入口模板，还有个app.json这是小程序配置路由等信息的文件</p></li></ul><h3 id="解析上诉内容目录"><a href="#解析上诉内容目录" class="headerlink" title="解析上诉内容目录"></a>解析上诉内容目录</h3><h4 id="1、static目录的作用"><a href="#1、static目录的作用" class="headerlink" title="1、static目录的作用"></a>1、static目录的作用</h4><p>static是存放静态文件的，mpvue框架由于目前架构还不是很成熟，所以在页面中引入图片资源时将图片放到src目录下，打包到dist，引入图片是加载不出来的。所以目前就先将static目录以webpack的copy方法将static目录copy到dist目录，方便小程序的导入。<br>同时我们想着如何引入三方的小程序UI库，这时候想到mpvue是将vue代码装成小程序代码，我们将小程序的UI组件引入到dist目录即可，供mpvue使用。要做到这点寿险将需要的UI组件存放到static对应的文件夹下。<br>然后页面中如何使用呢，就需要到page目录下的main.json文件中配置了，看下面代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"navigationBarTitleText"</span>: <span class="string">"页面标题"</span>,</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"i-icon"</span>: <span class="string">"../../static/iview/icon/index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样引入后在页面中直接使用组件即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i-icon <span class="class"><span class="keyword">class</span></span>=<span class="string">"iconUnfold"</span> type=<span class="string">"unfold"</span> /&gt;</span><br></pre></td></tr></table></figure></p><h4 id="2、store如何使用"><a href="#2、store如何使用" class="headerlink" title="2、store如何使用"></a>2、store如何使用</h4><p>store的使用和vue的使用是几乎一样的，不一样的在于它的引入及store存储的set和get需要改成小程序的方法。</p><ul><li>1、在main.js入口文件时将store实例化对象引入到vue类的原型上<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$store = store</span><br></pre></td></tr></table></figure></li></ul><p>这一点和vue是不一样的</p><ul><li>2、vuex的set和get需要自己写，用到<code>vuex-persistedstate</code>库来实现set和get<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">'vuex-persistedstate'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">state,</span><br><span class="line">getters,</span><br><span class="line">mutations,</span><br><span class="line">actions,</span><br><span class="line">modules: &#123;</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [createPersistedState(&#123;</span><br><span class="line"><span class="comment">// 配置白名单</span></span><br><span class="line">paths: [</span><br><span class="line"><span class="string">'ztInfo'</span>,</span><br><span class="line"><span class="string">'isLogin'</span></span><br><span class="line">],</span><br><span class="line">storage: &#123;</span><br><span class="line">getItem: <span class="function"><span class="params">key</span> =&gt;</span> wx.getStorageSync(key),</span><br><span class="line">setItem: <span class="function">(<span class="params">key, value</span>) =&gt;</span> wx.setStorageSync(key, value),</span><br><span class="line">removeItem: <span class="function"><span class="params">key</span> =&gt;</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>做完这些，vuex就可以在项目中使用起来了</p></blockquote><h4 id="3、路由的使用"><a href="#3、路由的使用" class="headerlink" title="3、路由的使用"></a>3、路由的使用</h4><blockquote><p>说到路由，有人讲到咋没看到vue-router啊，只能很抱歉的说一句目前还未很好的接入vue的路由，现阶段只能使用小程序的路由配置。</p></blockquote><ul><li>小程序的路由就需要用到src/app.json</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/discover/main"</span>, <span class="comment">// 页面路径</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"window"</span>: &#123; <span class="comment">// 全局窗口配置</span></span><br><span class="line">    <span class="string">"backgroundTextStyle"</span>: <span class="string">"light"</span>,</span><br><span class="line">    <span class="string">"navigationBarBackgroundColor"</span>: <span class="string">"#F73C31"</span>,</span><br><span class="line">    <span class="string">"navigationBarTitleText"</span>: <span class="string">"展堂拍卖"</span>,</span><br><span class="line">    <span class="string">"navigationBarTextStyle"</span>: <span class="string">"#ffffff"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tabBar"</span>: &#123; <span class="comment">// 底部导航切换</span></span><br><span class="line">      <span class="string">"color"</span>:<span class="string">"#000000"</span>,</span><br><span class="line">      <span class="string">"selectedColor"</span>: <span class="string">"#f0220d"</span>,</span><br><span class="line">      <span class="string">"list"</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"pagePath"</span>: <span class="string">"pages/discover/main"</span>,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">"现场勘察"</span>,</span><br><span class="line">            <span class="string">"iconPath"</span>: <span class="string">"static/images/nav_bottom2/nav_1.png"</span>,</span><br><span class="line">            <span class="string">"selectedIconPath"</span>: <span class="string">"static/images/nav_bottom2/nav_1_on.png"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">"pagePath"</span>: <span class="string">"pages/reservations/main"</span>,</span><br><span class="line">            <span class="string">"text"</span>: <span class="string">"预约看样"</span>,</span><br><span class="line">            <span class="string">"iconPath"</span>: <span class="string">"static/images/nav_bottom2/nav_2.png"</span>,</span><br><span class="line">            <span class="string">"selectedIconPath"</span>: <span class="string">"static/images/nav_bottom2/nav_2_on.png"</span></span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、project-config-json部分讲解"><a href="#4、project-config-json部分讲解" class="headerlink" title="4、project.config.json部分讲解"></a>4、project.config.json部分讲解</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"description"</span>: <span class="string">"项目配置文件。"</span>,</span><br><span class="line"><span class="string">"setting"</span>: &#123;</span><br><span class="line"><span class="string">"urlCheck"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"es6"</span>: <span class="literal">false</span>, <span class="comment">// 是否将es6转成es5</span></span><br><span class="line"><span class="string">"postcss"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"minified"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"newFeature"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"miniprogramRoot"</span>: <span class="string">"dist/"</span>, <span class="comment">// 小程序根目录</span></span><br><span class="line"><span class="string">"compileType"</span>: <span class="string">"miniprogram"</span>,</span><br><span class="line"><span class="string">"appid"</span>: <span class="string">"wx86d90741d5d57774"</span>, <span class="comment">// 小程序appid</span></span><br><span class="line"><span class="string">"projectname"</span>: <span class="string">"zhantang-fapai-wx-staff"</span>, <span class="comment">// 项目名称</span></span><br><span class="line"><span class="string">"libVersion"</span>: <span class="string">"2.3.2"</span>, <span class="comment">// 使用基础调试库的版本</span></span><br><span class="line"><span class="string">"condition"</span>: &#123;</span><br><span class="line"><span class="string">"search"</span>: &#123;</span><br><span class="line"><span class="string">"current"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="string">"list"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"conversation"</span>: &#123;</span><br><span class="line"><span class="string">"current"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="string">"list"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"game"</span>: &#123;</span><br><span class="line"><span class="string">"currentL"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="string">"list"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"miniprogram"</span>: &#123;</span><br><span class="line"><span class="string">"current"</span>: <span class="number">-1</span>,</span><br><span class="line"><span class="string">"list"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上诉注解的信息都可以在小程序工具中的详情中配置<br><img src="/images/mpvue/mpvue1.jpg"></p></blockquote><p>讲述了这些基本上一个框架使用就可以开始了，剩下的接口封装，store实现就不详细讲了，接口封装我用的是flyio，store实现上面也讲了重要的点。</p><h2 id="mpvue开发中遇到的坑点"><a href="#mpvue开发中遇到的坑点" class="headerlink" title="mpvue开发中遇到的坑点"></a>mpvue开发中遇到的坑点</h2><h3 id="mpvue中vue的大部分功能都可以使用，但是有一些会存在问题。"><a href="#mpvue中vue的大部分功能都可以使用，但是有一些会存在问题。" class="headerlink" title="mpvue中vue的大部分功能都可以使用，但是有一些会存在问题。"></a>mpvue中vue的大部分功能都可以使用，但是有一些会存在问题。</h3><ul><li>vue中可以使用filter过滤，mpvue不行</li><li>vue中可以使用dom中methods方法调用获取返回值， 在mpvue中不行，可以考虑用computed计算实现</li><li>vue中常用的slot在mpvue也成了鸡肋</li><li>原生组件上不要使用v-if，例如map将会导致地图位置不刷新，水印，canvas组件将会不更新数据等</li></ul><p>重点说下slot我遇到的坑，在vue中使用slot使用是对slot进行具名匹配，slot中的dom作用域是父组件的作用域，slot中组件同时可以继续嵌套。</p><p>那再mpvue中是什么个样子呢。。。我只想说<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">&lt;select-city</span><br><span class="line">  @onCityChange=&quot;onCityChange&quot;</span><br><span class="line">  :selectAddress=&quot;selectAddress&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &lt;template slot=&quot;default&quot;&gt;</span><br><span class="line">    &lt;section class=&quot;pickSection&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;picker&quot;&gt;&#123;&#123;selectAddress || &apos;地区&apos;&#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;i-icon class=&quot;iconUnfold&quot; type=&quot;unfold&quot; /&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">&lt;/select-city&gt;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">上面这块代码是mpvue中截取的，&lt;select-city/&gt;是个地址选择器组件，原先我要实现的功能是传个onCityChange方法进去并返回给我地址信息。</span><br><span class="line">然后将地址信息存到selectAddress变量里，再刷新到`&lt;div class=&quot;picker&quot;&gt;&#123;&#123;selectAddress || &apos;地区&apos;&#125;&#125;&lt;/div&gt;`这里，然而这么做了，然并卵</span><br></pre></td></tr></table></figure></p><p>最后查阅资料后我才知道，mpvue中的slot只能传静态数据，且需要对slot具名，slot嵌套无效，更尴尬的是，slot中的作用域竟然是在子组件里。<br>我有点蒙，然后就在父组件上传递了个<code>selectAddress</code>,然后才能获取地址信息。<br><strong>对于slot大家极力要求此功能完善下，目前为止还未实现</strong></p><blockquote><p>如果在小程序原生组件上例如map和canvas中使用v-if，mpvue在改变数据时会发现视图并未刷新。<br><strong>我采取的解决措施是将视图dom保留在文档流中，将组件定位到视图看不到的地方，符合条件再将之定位到需要的地方即可。</strong></p></blockquote><p>这里只阐述我遇到的坑~~~后续遇到将继续更新</p>]]></content>
      
      
      <categories>
          
          <category> mpvue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mpvue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React高阶组件(HOC)入门</title>
      <link href="/2018/11/16/React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6-HOC-%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/16/React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6-HOC-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;之前的文章<a href="https://segmentfault.com/a/1190000008814336" target="_blank" rel="noopener">React Mixins入门指南</a>介绍了React Mixin的使用。在实际使用中React Mixin的作用还是非常强大的，能够使得我们在多个组件中共用相同的方法。但是工程中大量使用Mixin也会带来非常多的问题。<a href="https://twitter.com/dan_abramov" target="_blank" rel="noopener">Dan Abramov</a>在文章<a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html" target="_blank" rel="noopener">Mixins Considered Harmful</a>介绍了Mixin带来的一些问题,总结下来主要是以下几点:</p></blockquote><a id="more"></a><ul><li><p>破坏组件封装性: Mixin可能会引入不可见的属性。例如在渲染组件中使用Mixin方法，给组件带来了不可见的属性(props)和状态(state)。并且Mixin可能会相互依赖，相互耦合，不利于代码维护。</p></li><li><p>不同的Mixin中的方法可能会相互冲突</p></li><li><p>为了处理上述的问题，React官方推荐使用高阶组件(High Order Component)</p></li></ul><h1 id="高阶组件-HOC"><a href="#高阶组件-HOC" class="headerlink" title="高阶组件(HOC)"></a>高阶组件(HOC)</h1><hr><p>  &nbsp;&nbsp;&nbsp;&nbsp;刚开始学习高阶组件时，这个概念就透漏着高级的气味，看上去就像是一种先进的编程技术的一个深奥术语，毕竟名字里就有”高阶”这种字眼，实质上并不是如此。高阶组件的概念应该是来源于JavaScript的高阶函数:</p><blockquote><p><code>高阶函数就是接受函数作为输入或者输出的函数</code></p></blockquote><p>  这么看来<a href="https://segmentfault.com/a/1190000008193605" target="_blank" rel="noopener">柯里化</a>也是高阶函数了。React官方定义高阶组件的概念是:</p><blockquote><p><code>A higher-order component is a function that takes a component and returns a new component.</code></p></blockquote><p>  &nbsp;&nbsp;&nbsp;&nbsp;(参照翻译了React官方文档的<a href="https://github.com/MrErHu/React-Advanced-Guides-CN" target="_blank" rel="noopener">Advanced Guides</a>部分，官方的高阶组件中文文档戳<a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FMrErHu%2FReact-Advanced-Guides-CN%2Fblob%2Fmaster%2Fdoc%2FHigher%2520Order%2520Components.md" target="_blank" rel="noopener">这里</a>)</p><p>  &nbsp;&nbsp;&nbsp;&nbsp;这么看来，高阶组件仅仅只是是一个接受组件组作输入并返回组件的函数。看上去并没有什么，那么高阶组件能为我们带来什么呢？首先看一下高阶组件是如何实现的，通常情况下，实现高阶组件的方式有以下两种:</p><ol><li>属性代理(Props Proxy)</li><li>反向继承(Inheritance Inversion)</li></ol><h2 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;又是一个听起来很高大上的名词，实质上是通过包裹原来的组件来操作props，举个简单的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line"><span class="comment">//高阶组件定义</span></span><br><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">WrapperComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> &lt;WrappedComponent &#123;...this.props&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//普通的组件</span><br><span class="line">class WrappedComponent extends Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        //....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//高阶组件使用</span><br><span class="line">export default HOC(WrappedComponent)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的例子非常简单，但足以说明问题。我们可以看见函数HOC返回了新的组件(WrapperComponent)，这个组件原封不动的返回作为参数的组件(也就是被包裹的组件:WrappedComponent)，并将传给它的参数(props)全部传递给被包裹的组件(WrappedComponent)。这么看起来好像并没有什么作用，其实属性代理的作用还是非常强大的。</p><h2 id="操作props"><a href="#操作props" class="headerlink" title="操作props"></a>操作props</h2><p>　　&nbsp;&nbsp;&nbsp;&nbsp;我们看到之前要传递给被包裹组件WrappedComponent的属性首先传递给了高阶组件返回的组件(WrapperComponent)，这样我们就获得了props的控制权(这也就是为什么这种方法叫做属性代理)。我们可以按照需要对传入的props进行增加、删除、修改(当然修改带来的风险需要你自己来控制)，举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WrapperComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">                name: <span class="string">'HOC'</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> &lt;WrappedComponent</span><br><span class="line">                &#123;...this.props&#125;</span><br><span class="line">                &#123;...newProps&#125;</span><br><span class="line">            /&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在上面的例子中，我们为被包裹组件(WrappedComponent)新增加了固定的name属性，因此WrappedComponent组件中就会多一个name的属性。</p><h2 id="获得refs的引用"><a href="#获得refs的引用" class="headerlink" title="获得refs的引用"></a>获得<code>refs</code>的引用</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们在属性代理中，可以轻松的拿到被包裹的组件的实例引用(<code>ref</code>)，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">wrapperComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">        storeRef(ref) &#123;</span><br><span class="line">            <span class="keyword">this</span>.ref = ref;</span><br><span class="line">        &#125;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> &lt;WrappedComponent</span><br><span class="line">                &#123;...this.props&#125;</span><br><span class="line">                ref = &#123;::this.storeRef&#125;</span><br><span class="line">            /&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的例子中，wrapperComponent渲染接受后，我们就可以拿到WrappedComponent组件的实例，进而实现调用实例方法的操作(当然这样会在一定程度上是反模式的，不是非常的推荐)。</p><h2 id="抽象state"><a href="#抽象state" class="headerlink" title="抽象state"></a>抽象state</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;属性代理的情况下，我们可以将被包裹组件(WrappedComponent)中的状态提到包裹组件中，一个常见的例子就是实现不受控组件到受控的组件的转变(关于不受控组件和受控组件戳<a href="https://github.com/MrErHu/React-Advanced-Guides-CN/blob/master/doc/Uncontrolled%20Components.md" target="_blank" rel="noopener">这里</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;input name="name" &#123;...this.props.name&#125; /&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const HOC = (WrappedComponent) =&gt;</span><br><span class="line">    class extends Component &#123;</span><br><span class="line">        constructor(props) &#123;</span><br><span class="line">            super(props);</span><br><span class="line">            this.state = &#123;</span><br><span class="line">                name: '',</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            this.onNameChange = this.onNameChange.bind(this);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        onNameChange(event) &#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                name: event.target.value,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            const newProps = &#123;</span><br><span class="line">                name: &#123;</span><br><span class="line">                    value: this.state.name,</span><br><span class="line">                    onChange: this.onNameChange,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            return &lt;WrappedComponent &#123;...this.props&#125; &#123;...newProps&#125; /&gt;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的例子中通过高阶组件，我们将不受控组件(WrappedComponent)成功的转变为受控组件.</p><h2 id="用其他元素包裹组件"><a href="#用其他元素包裹组件" class="headerlink" title="用其他元素包裹组件"></a>用其他元素包裹组件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以通过类似:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...this.props&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这种方式将被包裹组件包裹起来，来实现布局或者是样式的目的。<br></p><p>&nbsp;&nbsp;&nbsp;&nbsp;在属性代理这种方式实现的高阶组件，以上述为例，组件的渲染顺序是: 先WrappedComponent再WrapperComponent(执行ComponentDidMount的时间)。而卸载的顺序是先WrapperComponent再WrappedComponent(执行ComponentWillUnmount的时间)。</p><h2 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;反向继承是指返回的组件去继承之前的组件(这里都用WrappedComponent代指)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以看见返回的组件确实都继承自WrappedComponent,那么所有的调用将是反向调用的(例如:<code>super.render()</code>)，这也就是为什么叫做反向继承。</p><h2 id="渲染劫持"><a href="#渲染劫持" class="headerlink" title="渲染劫持"></a>渲染劫持</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;渲染劫持是指我们可以有意识地控制WrappedComponent的渲染过程，从而控制渲染控制的结果。例如我们可以根据部分参数去决定是否渲染组件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.props.isRender) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.render();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;甚至我们可以修改修改render的结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子来源于《深入React技术栈》</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOC = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">WrappedComponent</span> </span>&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> elementsTree = <span class="keyword">super</span>.render();</span><br><span class="line">            <span class="keyword">let</span> newProps = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (elementsTree &amp;&amp; elementsTree.type === <span class="string">'input'</span>) &#123;</span><br><span class="line">                newProps = &#123;<span class="attr">value</span>: <span class="string">'may the force be with you'</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> props = <span class="built_in">Object</span>.assign(&#123;&#125;, elementsTree.props, newProps);</span><br><span class="line">            <span class="keyword">const</span> newElementsTree = React.cloneElement(elementsTree, props, elementsTree.props.children);</span><br><span class="line">            <span class="keyword">return</span> newElementsTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;input value=&#123;<span class="string">'Hello World'</span>&#125; /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HOC(WrappedComponent)</span><br><span class="line"><span class="comment">//实际显示的效果是input的值为"may the force be with you"</span></span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;上面的例子中我们将WrappedComponent中的input元素value值修改为:<code>may the force be with you。</code>我们可以看到前后elementTree的区别:<br>elementsTree:</p><p><img src="/images/react/react1.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;newElementsTree:</p><p><img src="/images/react/react2.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;在反向继承中，我们可以做非常多的操作，修改state、props甚至是翻转Element Tree。反向继承有一个重要的点: <strong>反向继承不能保证完整的子组件树被解析</strong>，开始我对这个概念也不理解，后来在看了<a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">React Components</a>, <a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">Elements</a>, and <a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">Instances</a>这篇文章之后对这个概念有了自己的一点体会。React Components, Elements, and Instances这篇文章主要明确了一下几个点:</p><p>&nbsp;&nbsp;&nbsp;&nbsp; + 元素(element)是一个是用DOM节点或者组件来描述屏幕显示的纯对象，元素可以在属性(props.children)中包含其他的元素，一旦创建就不会改变。我们通过<code>JSX</code>和<code>React.createClass</code>创建的都是元素。<br>&nbsp;&nbsp;&nbsp;&nbsp; + 组件(component)可以接受属性(props)作为输入，然后返回一个元素树(element tree)作为输出。有多种实现方式:Class或者函数(Function)。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;所以，<strong>反向继承不能保证完整的子组件树被解析</strong>的意思的解析的元素树中包含了组件(函数类型或者Class类型)，就不能再操作组件的子组件了，这就是所谓的<strong>不能完全解析</strong>。举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyFuncComponent = <span class="function">(<span class="params">props</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;Hello World&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class MyClassComponent extends Component&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    render()&#123;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;div&gt;Hello World&lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrappedComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;span&gt;Hello World&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &lt;MyFuncComponent /&gt;</span><br><span class="line">                &lt;MyClassComponent /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const HOC = (WrappedComponent) =&gt;</span></span><br><span class="line"><span class="regexp">    class extends WrappedComponent &#123;</span></span><br><span class="line"><span class="regexp">        render() &#123;</span></span><br><span class="line"><span class="regexp">            const elementsTree = super.render();</span></span><br><span class="line"><span class="regexp">            return elementsTree;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default HOC(WrappedComponent);</span></span><br></pre></td></tr></table></figure><p><img src="/images/react/react3.png"></p><p><img src="/images/react/react4.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们可以查看解析的元素树(element tree)，<code>div</code>下的<code>span</code>是可以被完全被解析的，但是<code>MyFuncComponent</code>和<code>MyClassComponent</code>都是组件类型的，其子组件就不能被完全解析了。</p><h2 id="操作props和state"><a href="#操作props和state" class="headerlink" title="操作props和state"></a>操作props和state</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;在上面的图中我们可以看到，解析的元素树(element tree)中含有<code>props</code>和<code>state</code>(例子的组件中没有state),以及<code>ref</code>和<code>key</code>等值。因此，如果需要的话，我们不仅可以读取<code>props</code>和<code>state</code>,甚至可以修改增加、修改和删除。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;在某些情况下，我们可能需要为高阶属性传入一些参数，那我们就可以通过柯里化的形式传入参数，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'React'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HOCFactoryFactory = <span class="function">(<span class="params">...params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 可以做一些改变 params 的事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">HOC</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">            render() &#123;</span><br><span class="line">                <span class="keyword">return</span> &lt;WrappedComponent &#123;...this.props&#125; /&gt;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;可以通过下面方式使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOCFactoryFactory(params)(WrappedComponent)</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;这种方式是不是非常类似于<code>React-Redux</code>库中的<code>connect</code>函数，因为<code>connect</code>也是类似的一种高阶函数。反向继承不同于属性代理的调用顺序，组件的渲染顺序是: 先WrappedComponent再WrapperComponent(执行ComponentDidMount的时间)。而卸载的顺序也是先WrappedComponent再WrapperComponent(执行ComponentWillUnmount的时间)。</p><h2 id="HOC和Mixin的比较"><a href="#HOC和Mixin的比较" class="headerlink" title="HOC和Mixin的比较"></a>HOC和Mixin的比较</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;借用《深入React技术栈》一书中的图:</p><p><img src="/images/react/react5.png"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;高阶组件属于函数式编程(functional programming)思想，对于被包裹的组件时不会感知到高阶组件的存在，而高阶组件返回的组件会在原来的组件之上具有功能增强的效果。而Mixin这种混入的模式，会给组件不断增加新的方法和属性，组件本身不仅可以感知，甚至需要做相关的处理(例如命名冲突、状态维护)，一旦混入的模块变多时，整个组件就变的难以维护，也就是为什么如此多的React库都采用高阶组件的方式进行开发。</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown基础语法</title>
      <link href="/2018/11/16/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/11/16/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-markdown是什么？"><a href="#1-markdown是什么？" class="headerlink" title="1. markdown是什么？"></a>1. markdown是什么？</h1><blockquote><p>Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。<br>Markdown也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本Markdown.pl。</p></blockquote><a id="more"></a><h1 id="2-markdown语法"><a href="#2-markdown语法" class="headerlink" title="2. markdown语法"></a>2. markdown语法</h1><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><p>标题有两种形式：<br>(1) 第一种是用=或者-表示一级或者二级标题</p><blockquote><p>一级标题<br><code>======</code><br>二级标题<br><code>------</code></p></blockquote><p>效果如下：</p><blockquote><h1 id="一级标题down"><a href="#一级标题down" class="headerlink" title="一级标题down"></a>一级标题down</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>(2) 第二种就是#来表示1-6级标题，与HTML的h1-h6相似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; #一级标题</span><br><span class="line">&gt; ##二级标题</span><br><span class="line">&gt; ###三级标题</span><br><span class="line">&gt; ####四级标题</span><br><span class="line">&gt; #####五级标题</span><br><span class="line">&gt; ######六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-2-引用"><a href="#2-2-引用" class="headerlink" title="2.2 引用"></a>2.2 引用</h2><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><p>>引用<br>  >>嵌套引用</p></blockquote><p>效果如下：</p><blockquote><p>引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote><h2 id="2-3-代码块"><a href="#2-3-代码块" class="headerlink" title="2.3 代码块"></a>2.3 代码块</h2><p>代码块可以在每行加上四个空格来表示代码区域，效果如：</p><blockquote><p>   function foo(){<br>         return;<br>   }</p></blockquote><p>或者在开始与结尾用表示一样可以，效果同上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&gt; <span class="keyword">return</span>;</span><br><span class="line">&gt; &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-符号"><a href="#2-4-符号" class="headerlink" title="2.4 ``符号"></a>2.4 ``符号</h2><p>``可以用来表示相对较小区域的代码内容，或者起到标记作用，如</p><blockquote><p>`标记`</p></blockquote><p>效果如下：</p><blockquote><p><code>标记</code></p></blockquote><h2 id="2-5-强调与斜体"><a href="#2-5-强调与斜体" class="headerlink" title="2.5 强调与斜体"></a>2.5 强调与斜体</h2><p>在强调内容两侧分别加上*或者_，如：</p><blockquote><p>*斜体，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果如下：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h2 id="2-6-有序列表与无序列表"><a href="#2-6-有序列表与无序列表" class="headerlink" title="2.6 有序列表与无序列表"></a>2.6 有序列表与无序列表</h2><p>使用*、+、或-标记无序列表，如：</p><blockquote><p>(+-) 第一项 (+-) 第二项<br>*(+-) 第三项</p></blockquote><p>效果如下：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>使用数字123加上.即是有序列表，如：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><p>效果如下：</p><blockquote><p>1.第一项<br>2.第二项<br>3.第三项</p></blockquote><h2 id="2-7-分割线"><a href="#2-7-分割线" class="headerlink" title="2.7 分割线"></a>2.7 分割线</h2><p>分割线最常使用就是三个或以上*，还可以使用-和_，如：</p><blockquote><p>我是分割线1<br>***<br>我是分割线2<br>———<br>我是分割线3<br>___</p></blockquote><p>效果如下：</p><p>我是分割线1</p><hr><h2 id="我是分割线2"><a href="#我是分割线2" class="headerlink" title="我是分割线2"></a>我是分割线2</h2><p>我是分割线3</p><hr><h2 id="2-8-链接"><a href="#2-8-链接" class="headerlink" title="2.8 链接"></a>2.8 链接</h2><p>链接由[]与()组成，[]中的指描述，()中跟链接地址，如：</p><blockquote><p>[百度](<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a>)</p></blockquote><p>效果如下：</p><blockquote><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a></p></blockquote><h2 id="2-9-图片引入"><a href="#2-9-图片引入" class="headerlink" title="2.9 图片引入"></a>2.9 图片引入</h2><blockquote><p>![图片](图片地址)</p></blockquote><p>效果如下</p><blockquote><p><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/6h85RMsib6oGMKz0eibALsD1ricmicj6gUbUWAOs0C6Ynhf7Na6IBLyoWpHxTnHAZoAdznwicTf1Xaa61xdnEjV1QTg/132" alt="图片"></p></blockquote><p>2.9 表格<br>写法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header | Third Header</span><br><span class="line">------------ | ------------- | ------------</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure><p>在 Markdown 中，可以制作表格，例如：</p><table><thead><tr><th>First Header</th><th>Second Header</th><th>Third Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RSA加解密签名用法</title>
      <link href="/2017/08/11/RSA%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AD%BE%E5%90%8D%E7%94%A8%E6%B3%95/"/>
      <url>/2017/08/11/RSA%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AD%BE%E5%90%8D%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>非对称加密技术是保证我们信息安全非常重要的技术。 RSA便是其中翘楚， 应用广泛。本文仅从实用的角度， 总结一下<code>js</code>语言中， RSA加解密和签名加解密的实现。</p><a id="more"></a><p>分享两个库，都是用来加解密的，<a href="https://github.com/kjur/jsrsasign" target="_blank" rel="noopener">https://github.com/kjur/jsrsasign</a> <a href="https://github.com/travist/jsencrypt" target="_blank" rel="noopener">https://github.com/travist/jsencrypt</a><br>由于<code>jsrsasign</code>库加密业务数据总是出现报错，之后就用了<code>jsencrypt</code>来实现了业务数据的加密，再通过<code>jsrsasign</code>来实现签名以及签名校验</p><p><code>首先我们要知道加密解密的实现，要明白怎么去加密，又怎么去解密，这个地方就要求我们知道非对称密钥对的概念，什么是密钥对，就是双方之间互相提供公钥来实现加密解密用的密码，实现加解密要以下几个步骤：　　（1）乙方生成两把密钥（公钥和私钥）。公钥是公开的，任何人都可以获得，私钥则是保密的。　　（2）甲方获取乙方的公钥，然后用它对信息加密。　　（3）乙方得到加密后的信息，用私钥解密。</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> encryptMethod = <span class="function">(<span class="params">bussinessParams: <span class="built_in">Object</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//这部分是加密业务数据的方法</span></span><br><span class="line">    <span class="keyword">const</span> encrypt = <span class="keyword">new</span> JSEncrypt()</span><br><span class="line">    encrypt.setPublicKey(publicKey)</span><br><span class="line">    <span class="keyword">const</span> encrypted = encrypt.encrypt(<span class="built_in">encodeURIComponent</span>(</span><br><span class="line">      <span class="built_in">JSON</span>.stringify(bussinessParams)))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"公钥加密后，原文 : "</span> + encrypted);</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line">    <span class="comment">// 私钥解密</span></span><br><span class="line">    <span class="keyword">var</span> decrypt = <span class="keyword">new</span> JSEncrypt();</span><br><span class="line">    decrypt.setPrivateKey(privKey);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"公钥加密密文 : "</span> + encrypted);</span><br><span class="line">    <span class="keyword">var</span> uncrypted = decrypt.decrypt(encrypted);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"私钥解密后，原文 : "</span> + uncrypted);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    Alert.alert(<span class="string">`RSA <span class="subst">$&#123;e&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面诉说的是业务数据的加密</p><p><code>我们加密完业务数据信息还想要一种东西来验证我的业务数据是否被串改，这个时候就需要签名的方法来实现验证是否串改信息，签名是需要拿己方私钥对加密过的业务数据进行签名，签完名之后把加密数据和签名串都传给对方，对方用己方提供的公钥进行签名的校验，直接上代码</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sign = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sig = <span class="keyword">new</span> KJUR.crypto.Signature(&#123; <span class="attr">alg</span>: <span class="string">'SHA1withRSA'</span> &#125;)</span><br><span class="line">    sig.init(privateKey)</span><br><span class="line">    sig.updateString(encrypted)<span class="comment">//此处encrypted是加密的业务数据</span></span><br><span class="line">    <span class="keyword">const</span> hSigVal = <span class="built_in">encodeURIComponent</span>(sig.sign())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sig1 = <span class="keyword">new</span> KJUR.crypto.Signature(&#123; <span class="attr">alg</span>: <span class="string">'SHA1withRSA'</span> &#125;)</span><br><span class="line">    sig1.init(publicKey)<span class="comment">//此处需要公钥去对签名进行校验</span></span><br><span class="line">    sig1.updateString(encrypted)</span><br><span class="line">    <span class="keyword">const</span> verified = sig1.verify(hSigVal)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"签名校验后结果 : "</span> + verified);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    Alert.alert(<span class="string">`RSA <span class="subst">$&#123;e&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是签名的api文档：<a href="https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html" target="_blank" rel="noopener">https://kjur.github.io/jsrsasign/api/symbols/KJUR.crypto.Signature.html</a><br>签名校验的demo：<a href="https://kjur.github.io/jsrsasign/sample/sample-rsasign.html" target="_blank" rel="noopener">https://kjur.github.io/jsrsasign/sample/sample-rsasign.html</a><br>命令生成密钥文档：<a href="http://www.cnblogs.com/littleatp/p/5878763.html" target="_blank" rel="noopener">http://www.cnblogs.com/littleatp/p/5878763.html</a></p><p><code>JavaScript RSA 超长字符加解密刚刚接触到RSA当时不了解，RSA加解密是有字符串长度限制的，加密最大字符长度是117位，解密最大长度是128位。用到的JS库JSEncrypt,刚开始找了好几个,发现就这个好用一些,换回来了(途中遇到很多坑，一步一个坑过来的)。这个库的缺陷：没法用公钥解密只能加密，私钥没法加密只能</code></p><p>分段加密方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The right encryption code</span></span><br><span class="line">JSEncrypt.prototype.encryptLong = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> k = <span class="keyword">this</span>.getKey();</span><br><span class="line">  <span class="keyword">var</span> maxLength = (((k.n.bitLength()+<span class="number">7</span>)&gt;&gt;<span class="number">3</span>)<span class="number">-11</span>);<span class="comment">//此处是算法来算出你的密钥可以支持的最大加密字符串长度</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> lt = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> ct = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (string.length &gt; maxLength) &#123;</span><br><span class="line">      lt = string.match(<span class="regexp">/.&#123;1,117&#125;/g</span>);</span><br><span class="line">      lt.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = k.encrypt(entry);</span><br><span class="line">        ct += t1 ;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> hex2b64(ct);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> t = k.encrypt(string);</span><br><span class="line">    <span class="keyword">var</span> y = hex2b64(t);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>分段解密方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The error decryption code</span></span><br><span class="line">JSEncrypt.prototype.decryptLong = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> k = <span class="keyword">this</span>.getKey();</span><br><span class="line">  <span class="keyword">var</span> maxLength = ((k.n.bitLength()+<span class="number">7</span>)&gt;&gt;<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> string = b64tohex(string);</span><br><span class="line">    <span class="keyword">var</span> ct = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (string.length &gt; maxLength) &#123;</span><br><span class="line">      <span class="keyword">var</span> lt = string.match(<span class="regexp">/.&#123;1,128&#125;/g</span>);</span><br><span class="line">      lt.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">entry</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t1 = k.decrypt(entry);</span><br><span class="line">        ct += t1;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> y = k.decrypt(b64tohex(string));</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>此篇文章只是个人在使用这两个库中的使用的感受，<code>jsencrypt</code>可以加解密但是不存在签名方法， <code>jsrsasign</code>可以签名，但是使用过程中加密方法报错。<br>初次写文章，不到之处还请轻喷！！！</p>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解applyMiddleware和createStore之间的关系</title>
      <link href="/2017/08/01/%E7%90%86%E8%A7%A3redux%E4%B8%AD%E7%9A%84applyMiddleware%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/2017/08/01/%E7%90%86%E8%A7%A3redux%E4%B8%AD%E7%9A%84applyMiddleware%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>不得不佩服redux的作者<code>Dan Abramov</code>，看完<code>applyMiddleware</code>的源码,我的感受就是：还有这种操作？<br>与其说是理解applyMiddleware，不如说是理清<code>createStore</code>，<code>applyMiddleware</code>和一些中间件的关系，和为什么中间件都是<code>export const createThunkMiddleware = ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {...}</code>三层嵌套关系。  </p><a id="more"></a><pre><code class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params"></span>) </span>{  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, middlewares = <span class="built_in">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) {    middlewares[_key] = <span class="built_in">arguments</span>[_key];  }  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">createStore</span>) </span>{    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">reducer, preloadedState, enhancer</span>) </span>{      <span class="keyword">var</span> store = createStore(reducer, preloadedState, enhancer);      <span class="keyword">var</span> _dispatch = store.dispatch;      <span class="keyword">var</span> chain = [];      <span class="keyword">var</span> middlewareAPI = {        <span class="attr">getState</span>: store.getState,        <span class="attr">dispatch</span>: <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>{          <span class="keyword">return</span> _dispatch(action);        }      };      chain = middlewares.map(<span class="function"><span class="keyword">function</span> (<span class="params">middleware</span>) </span>{        <span class="keyword">return</span> middleware(middlewareAPI);      });      _dispatch = compose.apply(<span class="literal">undefined</span>, chain)(store.dispatch);      <span class="keyword">return</span> _extends({}, store, {        <span class="attr">dispatch</span>: _dispatch      });    };  };}</code></pre><p>精简的30行代码，设计思想强无敌。不难看出applyMiddleware这个函数接收一个createStore函数返回一个接收参数和createStore一样的函数。如下图是createStore的部分源码：<br><img src="/images/createStore1.png"><br>enhancer就是applyMiddleware执行完第一层后的函数，传一个createStore函数，再次返回一个函数，但此时只传外层的reducer和preloadedState，却没在传第三个enhancer参数。这里要看回到applyMiddleware函数<br><img src="/images/applyMiddleware1.png"><br>两层形参对应上面的实参，可以看到applyMiddleware内部还调用了createStore，整个一个完整的逻辑如下（部分重要代码）：  </p><p><code>首先是调用createStore，这个enhancer其实就是applyMiddleware(middleware1, middleware2)。</code>  </p><pre><code class="javascript"><span class="keyword">const</span> store = createStore(    reducer,    <span class="literal">undefined</span>,    enhancer  )</code></pre><p><code>其次是createStore里判断执行enhancer，如果传了enhancer，那就对enhancer执行再执行，且第二次执行不传enhancer，这里return的其实也是applyMiddleware函数的返回值，但是等下在applyMiddleware里还会在执行一次createStore。</code>  </p><pre><code class="javascript"><span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) {    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) {      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>);    }    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState);  }</code></pre><p><code>最后是applyMiddleware里的，由于createStore上面最后一次执行未传enhancer，所以applyMiddleware里的createStore是不会再次执行enhancer,不然就死循环了。拿到返回的sotre对象，重新改造dispatch并返回，这就是中间件的实现的一个大体流程。</code></p><pre><code class="javascript"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">createStore</span>) </span>{  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">reducer, preloadedState, enhancer</span>) </span>{    <span class="keyword">var</span> store = createStore(reducer, preloadedState, enhancer);    <span class="comment">//省略一万行</span>  }}</code></pre><p>至此，相信大家也差不多理解了createStore和applyMiddleware相互之间的关系了，其实关于中间件为什么嵌套三层的问题也自然而然的解开了，一张图片来说明吧。<br><img src="/images/applyMiddleware2.png"></p><h4 id="菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。"><a href="#菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。" class="headerlink" title="菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。"></a>菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。</h4><p>著作权归作者所有。<br>商业转载请联系作者获得授权,非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
          <category> redux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
