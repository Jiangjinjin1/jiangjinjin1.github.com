<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>遇到困难不回头</title>
  
  
  <link href="https://jiangjinjin1.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiangjinjin1.github.io/"/>
  <updated>2022-06-22T05:26:33.362Z</updated>
  <id>https://jiangjinjin1.github.io/</id>
  
  <author>
    <name>jinjinjiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>eslint与prettier与husky配置</title>
    <link href="https://jiangjinjin1.github.io/2022/06/18/eslint%E4%B8%8Eprettier%E4%B8%8Ehusky%E9%85%8D%E7%BD%AE/"/>
    <id>https://jiangjinjin1.github.io/2022/06/18/eslint%E4%B8%8Eprettier%E4%B8%8Ehusky%E9%85%8D%E7%BD%AE/</id>
    <published>2022-06-18T08:42:26.000Z</published>
    <updated>2022-06-22T05:26:33.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>eslint它规范的是代码偏向语法层面上的风格。</code>本篇文章以一个基于react+ts项目，来说明eslint+prettier+husky+lint-staged配置项目代码规范, 可以搭配vscode中的eslint插件，我就不做介绍了。</p><span id="more"></span><h1 id="一、eslint"><a href="#一、eslint" class="headerlink" title="一、eslint"></a>一、eslint</h1><h2 id="1、安装在项目中安装eslint"><a href="#1、安装在项目中安装eslint" class="headerlink" title="1、安装在项目中安装eslint"></a>1、安装在项目中安装eslint</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yard add eslint -D</span><br></pre></td></tr></table></figure><h2 id="2、创建eslint配置文件"><a href="#2、创建eslint配置文件" class="headerlink" title="2、创建eslint配置文件"></a>2、创建eslint配置文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx eslint —-init</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>获得一个.eslintrc.json文件,根据终端提示，选择项目框架类型，本文是以react+ts，按照提示选择，并生成.eslintrc.json文件</strong></p><img src="/images/projectConfigure/project_configure_01.png" alt=".eslintrc.json" title=".eslintrc.json配置内容"><h2 id="3、创建-eslintignore文件"><a href="#3、创建-eslintignore文件" class="headerlink" title="3、创建.eslintignore文件"></a>3、创建.eslintignore文件</h2><blockquote><p>针对项目结构，定义需要检测的目录，配置.eslintignproore忽略检测的文件目录</p></blockquote><img src="/images/projectConfigure/project_configure_02.png" alt=".eslintignore" title=".eslintignore配置内容"><h2 id="4、总结："><a href="#4、总结：" class="headerlink" title="4、总结："></a>4、总结：</h2><ul><li><strong>我们为什么需要eslint?</strong><br>因为每个人的代码习惯不一样，每个开发人员都需要和他人协作或者项目需要交接给下一代开发者。 保持统一的代码规范，可以极大地提高效率，降低沟通和理解代码的成本。</li></ul><h1 id="二、prettier"><a href="#二、prettier" class="headerlink" title="二、prettier"></a>二、prettier</h1><h2 id="1、安装prettier"><a href="#1、安装prettier" class="headerlink" title="1、安装prettier"></a>1、安装prettier</h2><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add prettier -D</span><br></pre></td></tr></table></figure><blockquote><p>在根目录创建.prettierrc，定义自己的规则</p></blockquote><img src="/images/projectConfigure/project_configure_03.png" title=".prettierrc配置内容"><h2 id="2、创建-prettierignore文件"><a href="#2、创建-prettierignore文件" class="headerlink" title="2、创建.prettierignore文件"></a>2、创建.prettierignore文件</h2><blockquote><p>同eslint一样，prettier也需要对一些特定目录进行格式化，忽略不检查的目录</p></blockquote><img src="/images/projectConfigure/project_configure_04.png" title=".prettierignore文件"><h2 id="3、prettier搭配eslint使用"><a href="#3、prettier搭配eslint使用" class="headerlink" title="3、prettier搭配eslint使用"></a>3、prettier搭配eslint使用</h2><blockquote><p>让编译器能报prettier的错</p></blockquote><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint-plugin-prettier eslint-config-prettier -D</span><br></pre></td></tr></table></figure><hr><p>介绍：</p><blockquote><p>1、<code>eslint-config-prettier为了解决eslint和prettier的冲突问题。</code><br>2、eslint-plugin-prettier搭配eslint-config-prettier使用，通过eslint-plugin-prettier插件，配置rules中开启”prettier&#x2F;prettier”: “error”规则。<br>3、在extends中加入 “plugin:prettier&#x2F;recommended”，这样就成功配置prettier插入eslint规则了。</p></blockquote><p>完整配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;es2021&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:react/recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="punctuation">,</span> <span class="comment">// 禁用插件中与 Prettier 冲突的规则</span></span><br><span class="line">        <span class="string">&quot;plugin:prettier/recommended&quot;</span> <span class="comment">// eslint-plugin-prettier搭配eslint-config-prettier使用简写形式</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ecmaFeatures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启prettier规则</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/ban-ts-comment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eqeqeq&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="comment">//必须使用全等</span></span><br><span class="line">        <span class="attr">&quot;no-debugger&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;react/display-name&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 防止React组件定义中缺少displayName</span></span><br><span class="line">        <span class="attr">&quot;react/no-string-refs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span> <span class="comment">// 防止字符串定义引用和防止引用this.refs</span></span><br><span class="line">        <span class="attr">&quot;react-hooks/exhaustive-deps&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 禁止出现未使用过的变量</span></span><br><span class="line">        <span class="attr">&quot;react/prop-types&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment">// 防止React组件定义中缺少属性验证</span></span><br><span class="line">        <span class="attr">&quot;indent&quot;</span><span class="punctuation">:</span> <span class="number">0</span> <span class="comment">// 强制使用一致的缩进</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4、项目中import会很多行，且混在一起，很难区分外部、三方、内部包引入"><a href="#4、项目中import会很多行，且混在一起，很难区分外部、三方、内部包引入" class="headerlink" title="4、项目中import会很多行，且混在一起，很难区分外部、三方、内部包引入"></a>4、项目中import会很多行，且混在一起，很难区分外部、三方、内部包引入</h2><blockquote><p>你可能认识到这里的问题。很难区分什么是所有的第三方和本地（内部）导入。它们没有被分组，似乎到处都是。</p></blockquote><p>解决方案：<br>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint-plugin-import -D</span><br></pre></td></tr></table></figure><p>完整配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;env&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;browser&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;es2021&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:react/recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span><span class="punctuation">,</span> <span class="comment">// 禁用插件中与 Prettier 冲突的规则</span></span><br><span class="line">        <span class="string">&quot;plugin:prettier/recommended&quot;</span> <span class="comment">// eslint-plugin-prettier搭配eslint-config-prettier使用简写形式</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ecmaFeatures&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sourceType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;import&quot;</span> <span class="comment">// eslint-plugin-import配置</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prettier/prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span> <span class="comment">// 开启prettier规则</span></span><br><span class="line">        <span class="attr">&quot;@typescript-eslint/ban-ts-comment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;eqeqeq&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="comment">//必须使用全等</span></span><br><span class="line">        <span class="attr">&quot;no-debugger&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;react/display-name&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 防止React组件定义中缺少displayName</span></span><br><span class="line">        <span class="attr">&quot;react/no-string-refs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;warn&quot;</span><span class="punctuation">,</span> <span class="comment">// 防止字符串定义引用和防止引用this.refs</span></span><br><span class="line">        <span class="attr">&quot;react-hooks/exhaustive-deps&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;no-unused-vars&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 禁止出现未使用过的变量</span></span><br><span class="line">        <span class="attr">&quot;react/prop-types&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="comment">// 防止React组件定义中缺少属性验证</span></span><br><span class="line">        <span class="attr">&quot;indent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 强制使用一致的缩进</span></span><br><span class="line">        <span class="attr">&quot;import/order&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// eslint-plugin-import 规则配置</span></span><br><span class="line">            <span class="string">&quot;error&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;groups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;builtin&quot;</span><span class="punctuation">,</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span> <span class="string">&quot;internal&quot;</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="string">&quot;parent&quot;</span><span class="punctuation">,</span> <span class="string">&quot;sibling&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pathGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;pattern&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="string">&quot;before&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;pathGroupsExcludedImportTypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;react&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;newlines-between&quot;</span><span class="punctuation">:</span> <span class="string">&quot;always&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;alphabetize&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;caseInsensitive&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/images/projectConfigure/project_configure_09.png" title="改善后的效果"><p>参考：<a href="https://dev.to/otamnitram/sorting-your-imports-correctly-in-react-213m">eslint-plugin-import配置</a></p><h2 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h2><p><code>这里需要再强调一点，这个extends数组中的规则，后面的会覆盖前面的，也就是plugin:react/recommended会覆盖掉recommended中的重复部分。</code><br>并且这里的规则是由安装依赖引入的，存放在node_modules文件夹中，也就是为了保证其他开发人员代码一致，这里面的文件是不允许改动的。<br>所以说eslint和prettier的冲突问题，其实说的是这些依赖引入的规则和prettier的冲突！</p><h1 id="husky的使用"><a href="#husky的使用" class="headerlink" title="husky的使用"></a>husky的使用</h1><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky -D</span><br></pre></td></tr></table></figure><p>用法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm set-script prepare &quot;husky install&quot;</span><br><span class="line">npm run prepare</span><br></pre></td></tr></table></figure><p>Add a hook:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit &quot;npx lint-staged&quot;</span><br><span class="line">git add .husky/pre-commit</span><br></pre></td></tr></table></figure><p>会在.husky目录生成一个pre-commit文件</p><img src="/images/projectConfigure/project_configure_06.png" title=".husky目录结构"><p>在package.json中配置husky</p><img src="/images/projectConfigure/project_configure_07.png" title="package.json中配置husky"><h1 id="lint-staged使用"><a href="#lint-staged使用" class="headerlink" title="lint-staged使用"></a>lint-staged使用</h1><p><strong>考虑要使用lint-staged</strong><br><code>如果这是一个新项目以上的就已经满足要求了，但是如果拿到的项目是一个老项目呢，别人开发了很久，这个时候加入再加入 eslint 规则，全局去检查，会发现一堆报错信息。这个就慌了。修改可能带来其他问题。</code><br>这时候就需要用到lint-staged缓存区，只有在缓存区的文件做eslint检测。</p><blockquote><p>为了解决这种问题，我们就需要引入 lint-staged</p></blockquote><p>在package.json中增加配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx lint-staged&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;src/**/*.&#123;js,ts,tsx&#125;&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;prettier --write&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>到这一步，配置基本就完成了。开始提交测试吧。<br>根据项目需要，自己定制eslint中的rules和prettier规则。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;eslint它规范的是代码偏向语法层面上的风格。&lt;/code&gt;本篇文章以一个基于react+ts项目，来说明eslint+prettier+husky+lint-staged配置项目代码规范, 可以搭配vscode中的eslint插件，我就不做介绍了。&lt;/p&gt;</summary>
    
    
    
    <category term="项目框架配置" scheme="https://jiangjinjin1.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE/"/>
    
    <category term="eslint配置" scheme="https://jiangjinjin1.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE/eslint%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="项目框架配置" scheme="https://jiangjinjin1.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>常用的css reset</title>
    <link href="https://jiangjinjin1.github.io/2018/12/12/%E5%B8%B8%E7%94%A8%E7%9A%84css-reset/"/>
    <id>https://jiangjinjin1.github.io/2018/12/12/%E5%B8%B8%E7%94%A8%E7%9A%84css-reset/</id>
    <published>2018-12-12T06:07:11.000Z</published>
    <updated>2018-12-12T06:13:03.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的css-reset"><a href="#常用的css-reset" class="headerlink" title="常用的css reset"></a>常用的css reset</h1><h2 id="雅虎工程师提供的CSS初始化示例代码"><a href="#雅虎工程师提供的CSS初始化示例代码" class="headerlink" title="雅虎工程师提供的CSS初始化示例代码"></a>雅虎工程师提供的CSS初始化示例代码</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,pre,<span class="selector-tag">code</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">button</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">p</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">background</span>:<span class="number">#fff</span>; <span class="attribute">color</span>:<span class="number">#555</span>; <span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="attribute">font-family</span>: Verdana, Arial, Helvetica, sans-serif; &#125;</span><br><span class="line"><span class="selector-tag">td</span>,<span class="selector-tag">th</span>,<span class="selector-tag">caption</span> &#123; <span class="attribute">font-size</span>:<span class="number">14px</span>; &#125;</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123; <span class="attribute">font-weight</span>:normal; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125;</span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">th</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; <span class="attribute">font-weight</span>:normal;&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">color</span>:<span class="number">#555</span>; <span class="attribute">text-decoration</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span> &#123; <span class="attribute">list-style</span>:none; &#125;</span><br><span class="line"><span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, select, <span class="selector-tag">button</span> &#123; <span class="attribute">font</span>:<span class="number">14px</span> Verdana,Helvetica,Arial,sans-serif; &#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; &#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">overflow-y</span>: scroll;&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;<span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>; <span class="attribute">display</span>: block; <span class="attribute">height</span>:<span class="number">0</span>; <span class="attribute">clear</span>:both; <span class="attribute">visibility</span>: hidden;&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; *zoom:<span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="腾讯官网-样式初始化"><a href="#腾讯官网-样式初始化" class="headerlink" title="腾讯官网 样式初始化"></a>腾讯官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">legend</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,select&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125; </span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">font</span>:<span class="number">12px</span><span class="string">&quot;宋体&quot;</span>,<span class="string">&quot;Arial Narrow&quot;</span>,HELVETICA;<span class="attribute">background</span>:<span class="number">#fff</span>;-webkit-text-size-adjust:<span class="number">100%</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#2d374b</span>;<span class="attribute">text-decoration</span>:none&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#cd0200</span>;<span class="attribute">text-decoration</span>:underline&#125; </span><br><span class="line"><span class="selector-tag">em</span>&#123;<span class="attribute">font-style</span>:normal&#125; </span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style</span>:none&#125; </span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">border</span>:<span class="number">0</span>;<span class="attribute">vertical-align</span>:middle&#125; </span><br><span class="line"><span class="selector-tag">table</span>&#123;<span class="attribute">border-collapse</span>:collapse;<span class="attribute">border-spacing</span>:<span class="number">0</span>&#125; </span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">word-wrap</span>:break-word&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="新浪官网-样式初始化"><a href="#新浪官网-样式初始化" class="headerlink" title="新浪官网 样式初始化"></a>新浪官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">p</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">img</span>,<span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">border</span>:<span class="number">0</span>;&#125; </span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background</span>:<span class="number">#fff</span>;<span class="attribute">color</span>:<span class="number">#333</span>;<span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">margin-top</span>:<span class="number">5px</span>;<span class="attribute">font-family</span>:<span class="string">&quot;SimSun&quot;</span>,<span class="string">&quot;宋体&quot;</span>,<span class="string">&quot;Arial Narrow&quot;</span>;&#125; </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;<span class="attribute">list-style-type</span>:none;&#125; </span><br><span class="line">select,<span class="selector-tag">input</span>,<span class="selector-tag">img</span>,select&#123;<span class="attribute">vertical-align</span>:middle;&#125; </span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">a</span>&#123;<span class="attribute">text-decoration</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>:<span class="number">#009</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:<span class="number">#800080</span>;&#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">color</span>:<span class="number">#c00</span>;<span class="attribute">text-decoration</span>:underline;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="淘宝官网-样式初始化"><a href="#淘宝官网-样式初始化" class="headerlink" title="淘宝官网 样式初始化"></a>淘宝官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, hr, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">li</span>, pre, <span class="selector-tag">form</span>, <span class="selector-tag">fieldset</span>, <span class="selector-tag">legend</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, <span class="selector-tag">textarea</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; &#125; </span><br><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">button</span>, <span class="selector-tag">input</span>, select, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span> tahoma, arial, \<span class="number">5</span>b8b\<span class="number">4</span>f53; &#125; </span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>&#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125; </span><br><span class="line"><span class="selector-tag">address</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">var</span> &#123; <span class="attribute">font-style</span>:normal; &#125; </span><br><span class="line"><span class="selector-tag">code</span>, <span class="selector-tag">kbd</span>, pre, <span class="selector-tag">samp</span> &#123; <span class="attribute">font-family</span>:couriernew, courier, monospace; &#125; </span><br><span class="line">small&#123; <span class="attribute">font-size</span>:<span class="number">12px</span>; &#125; </span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">ol</span> &#123; <span class="attribute">list-style</span>:none; &#125; </span><br><span class="line"><span class="selector-tag">a</span> &#123; <span class="attribute">text-decoration</span>:none; &#125; </span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">text-decoration</span>:underline; &#125; </span><br><span class="line"><span class="selector-tag">sup</span> &#123; <span class="attribute">vertical-align</span>:text-top; &#125; </span><br><span class="line">sub&#123; <span class="attribute">vertical-align</span>:text-bottom; &#125; </span><br><span class="line"><span class="selector-tag">legend</span> &#123; <span class="attribute">color</span>:<span class="number">#000</span>; &#125; </span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">img</span> &#123; <span class="attribute">border</span>:<span class="number">0</span>; &#125; </span><br><span class="line"><span class="selector-tag">button</span>, <span class="selector-tag">input</span>, select, <span class="selector-tag">textarea</span> &#123; <span class="attribute">font-size</span>:<span class="number">100%</span>; &#125; </span><br><span class="line"><span class="selector-tag">table</span> &#123; <span class="attribute">border-collapse</span>:collapse; <span class="attribute">border-spacing</span>:<span class="number">0</span>; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网易官网-样式初始化"><a href="#网易官网-样式初始化" class="headerlink" title="网易官网 样式初始化"></a>网易官网 样式初始化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;<span class="attribute">overflow-y</span>:scroll;&#125; </span><br><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">29px</span>00; <span class="attribute">font</span>:<span class="number">12px</span><span class="string">&quot;\5B8B\4F53&quot;</span>,sans-serif;<span class="attribute">background</span>:<span class="number">#ffffff</span>;&#125; </span><br><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,pre,<span class="selector-tag">form</span>,<span class="selector-tag">fieldset</span>,<span class="selector-tag">input</span>,<span class="selector-tag">textarea</span>,<span class="selector-tag">blockquote</span>,<span class="selector-tag">p</span>&#123;<span class="attribute">padding</span>:<span class="number">0</span>; <span class="attribute">margin</span>:<span class="number">0</span>;&#125; </span><br><span class="line"><span class="selector-tag">table</span>,<span class="selector-tag">td</span>,<span class="selector-tag">tr</span>,<span class="selector-tag">th</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>;&#125; </span><br><span class="line"><span class="selector-tag">li</span>&#123;<span class="attribute">list-style-type</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">vertical-align</span>:top;<span class="attribute">border</span>:<span class="number">0</span>;&#125; </span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span> &#123;<span class="attribute">list-style</span>:none;&#125; </span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;<span class="attribute">font-size</span>:<span class="number">12px</span>; <span class="attribute">font-weight</span>:normal;&#125; </span><br><span class="line"><span class="selector-tag">address</span>,<span class="selector-tag">cite</span>,<span class="selector-tag">code</span>,<span class="selector-tag">em</span>,<span class="selector-tag">th</span> &#123;<span class="attribute">font-weight</span>:normal; <span class="attribute">font-style</span>:normal;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="admin10000-com-的html模板，用于每次新开发页面使用。"><a href="#admin10000-com-的html模板，用于每次新开发页面使用。" class="headerlink" title="admin10000.com 的html模板，用于每次新开发页面使用。"></a>admin10000.com 的html模板，用于每次新开发页面使用。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    　　<span class="tag">&lt;<span class="name">title</span>&gt;</span>网站标题 - Admin10000.com <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;zh-CN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页作者&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Copyright&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网站版权&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网站关键字&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网站描述&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;Shortcut Icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;网站.ico图标路径&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;CSS文件路径&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;JS文件路径&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;常用的css-reset&quot;&gt;&lt;a href=&quot;#常用的css-reset&quot; class=&quot;headerlink&quot; title=&quot;常用的css reset&quot;&gt;&lt;/a&gt;常用的css reset&lt;/h1&gt;&lt;h2 id=&quot;雅虎工程师提供的CSS初始化示例代码&quot;&gt;&lt;a href=&quot;#雅虎工程师提供的CSS初始化示例代码&quot; class=&quot;headerlink&quot; title=&quot;雅虎工程师提供的CSS初始化示例代码&quot;&gt;&lt;/a&gt;雅虎工程师提供的CSS初始化示例代码&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;dl&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;dt&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;dd&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;ol&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;h3&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;h4&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;h5&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;h6&lt;/span&gt;,pre,&lt;span class=&quot;selector-tag&quot;&gt;code&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;form&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;fieldset&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;legend&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;button&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;textarea&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;blockquote&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;th&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;td&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;margin&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;body&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#fff&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#555&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;font-family&lt;/span&gt;: Verdana, Arial, Helvetica, sans-serif; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;td&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;th&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;caption&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;h1&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;h2&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;h3&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;h4&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;h5&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;h6&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:normal; &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;address&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;caption&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;cite&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;code&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;dfn&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;th&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;var&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font-style&lt;/span&gt;:normal; &lt;span class=&quot;attribute&quot;&gt;font-weight&lt;/span&gt;:normal;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#555&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;text-decoration&lt;/span&gt;:underline; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;img&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;border&lt;/span&gt;:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;ol&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;ul&lt;/span&gt;,&lt;span class=&quot;selector-tag&quot;&gt;li&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;list-style&lt;/span&gt;:none; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;textarea&lt;/span&gt;, select, &lt;span class=&quot;selector-tag&quot;&gt;button&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;14px&lt;/span&gt; Verdana,Helvetica,Arial,sans-serif; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;table&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;border-collapse&lt;/span&gt;:collapse; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;html&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;overflow-y&lt;/span&gt;: scroll;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:after&lt;/span&gt; &amp;#123;&lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: block; &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;clear&lt;/span&gt;:both; &lt;span class=&quot;attribute&quot;&gt;visibility&lt;/span&gt;: hidden;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.clearfix&lt;/span&gt; &amp;#123; *zoom:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="CSS类" scheme="https://jiangjinjin1.github.io/categories/CSS%E7%B1%BB/"/>
    
    
    <category term="CSS类" scheme="https://jiangjinjin1.github.io/tags/CSS%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>mac中使用生成项目结构图tree</title>
    <link href="https://jiangjinjin1.github.io/2018/11/29/mac%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BEtree/"/>
    <id>https://jiangjinjin1.github.io/2018/11/29/mac%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BEtree/</id>
    <published>2018-11-29T02:06:31.000Z</published>
    <updated>2018-11-29T05:45:25.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h1><blockquote><p>Mac 的话是没有自带tree命令的，但是我们可以通过homebrew（如果你不知道它的话，这是官网）安装：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">brew install tree</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>然后等待安装完成后</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tree --version# 查看是否安装成功</span><br><span class="line">tree --help# 查看帮助</span><br></pre></td></tr></table></figure><span id="more"></span><h1 id="中文Api"><a href="#中文Api" class="headerlink" title="中文Api"></a>中文Api</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">-a 显示所有文件和目录。</span><br><span class="line">-A 使用<span class="variable constant_">ASNI</span>绘图字符显示树状图而非以<span class="variable constant_">ASCII</span>字符组合。</span><br><span class="line">-C 在文件和目录清单加上色彩，便于区分各种类型。</span><br><span class="line">-d 显示目录名称而非内容。</span><br><span class="line">-D 列出文件或目录的更改时间。</span><br><span class="line">-f 在每个文件或目录之前，显示完整的相对路径名称。</span><br><span class="line">-F 在执行文件，目录，<span class="title class_">Socket</span>，符号连接，管道名称名称，各自加上<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>,<span class="string">&quot;=&quot;</span>,<span class="string">&quot;@&quot;</span>,<span class="string">&quot;|&quot;</span>号。</span><br><span class="line">-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</span><br><span class="line">-i 不以阶梯状列出文件或目录名称。</span><br><span class="line">-I 不显示符合范本样式的文件或目录名称。</span><br><span class="line">-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</span><br><span class="line">-n 不在文件和目录清单加上色彩。</span><br><span class="line">-N 直接列出文件和目录名称，包括控制字符。</span><br><span class="line">-p 列出权限标示。</span><br><span class="line">-P 只显示符合范本样式的文件或目录名称。</span><br><span class="line">-q 用<span class="string">&quot;?&quot;</span>号取代控制字符，列出文件和目录名称。</span><br><span class="line">-s 列出文件或目录大小。</span><br><span class="line">-t 用文件和目录的更改时间排序。</span><br><span class="line">-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</span><br><span class="line">-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Used"><a href="#Used" class="headerlink" title="Used"></a>Used</h1><blockquote><p>下面是我生成上面的结构所用的命令，大家可以参考下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree -I <span class="string">&#x27;node_modules|dist|*.mp3|*.jpg&#x27;</span> -f</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;mac&quot;&gt;&lt;a href=&quot;#mac&quot; class=&quot;headerlink&quot; title=&quot;mac&quot;&gt;&lt;/a&gt;mac&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Mac 的话是没有自带tree命令的，但是我们可以通过homebrew（如果你不知道它的话，这是官网）安装：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install tree&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;然后等待安装完成后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tree --version	# 查看是否安装成功&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tree --help		# 查看帮助&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="工具类" scheme="https://jiangjinjin1.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="工具类" scheme="https://jiangjinjin1.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>React高阶组件(HOC)入门</title>
    <link href="https://jiangjinjin1.github.io/2018/11/16/React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6-HOC-%E5%85%A5%E9%97%A8/"/>
    <id>https://jiangjinjin1.github.io/2018/11/16/React%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6-HOC-%E5%85%A5%E9%97%A8/</id>
    <published>2018-11-16T07:24:47.000Z</published>
    <updated>2018-11-29T05:45:22.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;之前的文章<a href="https://segmentfault.com/a/1190000008814336">React Mixins入门指南</a>介绍了React Mixin的使用。在实际使用中React Mixin的作用还是非常强大的，能够使得我们在多个组件中共用相同的方法。但是工程中大量使用Mixin也会带来非常多的问题。<a href="https://twitter.com/dan_abramov">Dan Abramov</a>在文章<a href="https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html">Mixins Considered Harmful</a>介绍了Mixin带来的一些问题,总结下来主要是以下几点:</p></blockquote><span id="more"></span><ul><li><p>破坏组件封装性: Mixin可能会引入不可见的属性。例如在渲染组件中使用Mixin方法，给组件带来了不可见的属性(props)和状态(state)。并且Mixin可能会相互依赖，相互耦合，不利于代码维护。</p></li><li><p>不同的Mixin中的方法可能会相互冲突</p></li><li><p>为了处理上述的问题，React官方推荐使用高阶组件(High Order Component)</p></li></ul><h1 id="高阶组件-HOC"><a href="#高阶组件-HOC" class="headerlink" title="高阶组件(HOC)"></a>高阶组件(HOC)</h1><hr><p>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;刚开始学习高阶组件时，这个概念就透漏着高级的气味，看上去就像是一种先进的编程技术的一个深奥术语，毕竟名字里就有”高阶”这种字眼，实质上并不是如此。高阶组件的概念应该是来源于JavaScript的高阶函数:</p><blockquote><p><code>高阶函数就是接受函数作为输入或者输出的函数</code></p></blockquote><p>  这么看来<a href="https://segmentfault.com/a/1190000008193605">柯里化</a>也是高阶函数了。React官方定义高阶组件的概念是:</p><blockquote><p><code>A higher-order component is a function that takes a component and returns a new component.</code></p></blockquote><p>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(参照翻译了React官方文档的<a href="https://github.com/MrErHu/React-Advanced-Guides-CN">Advanced Guides</a>部分，官方的高阶组件中文文档戳<a href="https://link.juejin.im/?target=https://github.com/MrErHu/React-Advanced-Guides-CN/blob/master/doc/Higher%2520Order%2520Components.md">这里</a>)</p><p>  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这么看来，高阶组件仅仅只是是一个接受组件组作输入并返回组件的函数。看上去并没有什么，那么高阶组件能为我们带来什么呢？首先看一下高阶组件是如何实现的，通常情况下，实现高阶组件的方式有以下两种:</p><ol><li>属性代理(Props Proxy)</li><li>反向继承(Inheritance Inversion)</li></ol><h2 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;又是一个听起来很高大上的名词，实质上是通过包裹原来的组件来操作props，举个简单的例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span>;</span><br><span class="line"><span class="comment">//高阶组件定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">WrapperComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通的组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WrappedComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高阶组件使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">HOC</span>(<span class="title class_">WrappedComponent</span>)</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上面的例子非常简单，但足以说明问题。我们可以看见函数HOC返回了新的组件(WrapperComponent)，这个组件原封不动的返回作为参数的组件(也就是被包裹的组件:WrappedComponent)，并将传给它的参数(props)全部传递给被包裹的组件(WrappedComponent)。这么看起来好像并没有什么作用，其实属性代理的作用还是非常强大的。</p><h2 id="操作props"><a href="#操作props" class="headerlink" title="操作props"></a>操作props</h2><p>　　&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们看到之前要传递给被包裹组件WrappedComponent的属性首先传递给了高阶组件返回的组件(WrapperComponent)，这样我们就获得了props的控制权(这也就是为什么这种方法叫做属性代理)。我们可以按照需要对传入的props进行增加、删除、修改(当然修改带来的风险需要你自己来控制)，举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">WrapperComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;HOC&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123;<span class="attr">...newProps</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在上面的例子中，我们为被包裹组件(WrappedComponent)新增加了固定的name属性，因此WrappedComponent组件中就会多一个name的属性。</p><h2 id="获得refs的引用"><a href="#获得refs的引用" class="headerlink" title="获得refs的引用"></a>获得<code>refs</code>的引用</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们在属性代理中，可以轻松的拿到被包裹的组件的实例引用(<code>ref</code>)，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span>;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">wrapperComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">        <span class="title function_">storeRef</span>(<span class="params">ref</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ref</span> = ref;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">ref</span> = <span class="string">&#123;::this.storeRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上面的例子中，wrapperComponent渲染接受后，我们就可以拿到WrappedComponent组件的实例，进而实现调用实例方法的操作(当然这样会在一定程度上是反模式的，不是非常的推荐)。</p><h2 id="抽象state"><a href="#抽象state" class="headerlink" title="抽象state"></a>抽象state</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;属性代理的情况下，我们可以将被包裹组件(WrappedComponent)中的状态提到包裹组件中，一个常见的例子就是实现不受控组件到受控的组件的转变(关于不受控组件和受控组件戳<a href="https://github.com/MrErHu/React-Advanced-Guides-CN/blob/master/doc/Uncontrolled%20Components.md">这里</a>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WrappedComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> &#123;<span class="attr">...this.props.name</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">        <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(props);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onNameChange</span> = <span class="variable language_">this</span>.<span class="property">onNameChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">onNameChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: event.<span class="property">target</span>.<span class="property">value</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">                <span class="attr">name</span>: &#123;</span><br><span class="line">                    <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">name</span>,</span><br><span class="line">                    <span class="attr">onChange</span>: <span class="variable language_">this</span>.<span class="property">onNameChange</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; &#123;<span class="attr">...newProps</span>&#125; /&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上面的例子中通过高阶组件，我们将不受控组件(WrappedComponent)成功的转变为受控组件.</p><h2 id="用其他元素包裹组件"><a href="#用其他元素包裹组件" class="headerlink" title="用其他元素包裹组件"></a>用其他元素包裹组件</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们可以通过类似:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这种方式将被包裹组件包裹起来，来实现布局或者是样式的目的。<br/></p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在属性代理这种方式实现的高阶组件，以上述为例，组件的渲染顺序是: 先WrappedComponent再WrapperComponent(执行ComponentDidMount的时间)。而卸载的顺序是先WrapperComponent再WrappedComponent(执行ComponentWillUnmount的时间)。</p><h2 id="反向继承"><a href="#反向继承" class="headerlink" title="反向继承"></a>反向继承</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;反向继承是指返回的组件去继承之前的组件(这里都用WrappedComponent代指)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">WrappedComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们可以看见返回的组件确实都继承自WrappedComponent,那么所有的调用将是反向调用的(例如:<code>super.render()</code>)，这也就是为什么叫做反向继承。</p><h2 id="渲染劫持"><a href="#渲染劫持" class="headerlink" title="渲染劫持"></a>渲染劫持</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;渲染劫持是指我们可以有意识地控制WrappedComponent的渲染过程，从而控制渲染控制的结果。例如我们可以根据部分参数去决定是否渲染组件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">WrappedComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">isRender</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;甚至我们可以修改修改render的结果:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子来源于《深入React技术栈》</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">WrappedComponent</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> elementsTree = <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">            <span class="keyword">let</span> newProps = &#123;&#125;;</span><br><span class="line">            <span class="keyword">if</span> (elementsTree &amp;&amp; elementsTree.<span class="property">type</span> === <span class="string">&#x27;input&#x27;</span>) &#123;</span><br><span class="line">                newProps = &#123;<span class="attr">value</span>: <span class="string">&#x27;may the force be with you&#x27;</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> props = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, elementsTree.<span class="property">props</span>, newProps);</span><br><span class="line">            <span class="keyword">const</span> newElementsTree = <span class="title class_">React</span>.<span class="title function_">cloneElement</span>(elementsTree, props, elementsTree.<span class="property">props</span>.<span class="property">children</span>);</span><br><span class="line">            <span class="keyword">return</span> newElementsTree;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WrappedComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;</span>&#x27;<span class="attr">Hello</span> <span class="attr">World</span>&#x27;&#125; /&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">HOC</span>(<span class="title class_">WrappedComponent</span>)</span><br><span class="line"><span class="comment">//实际显示的效果是input的值为&quot;may the force be with you&quot;</span></span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;上面的例子中我们将WrappedComponent中的input元素value值修改为:<code>may the force be with you。</code>我们可以看到前后elementTree的区别:<br>elementsTree:</p><img src="/images/react/react1.png"><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;newElementsTree:</p><img src="/images/react/react2.png"><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在反向继承中，我们可以做非常多的操作，修改state、props甚至是翻转Element Tree。反向继承有一个重要的点: <strong>反向继承不能保证完整的子组件树被解析</strong>，开始我对这个概念也不理解，后来在看了<a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">React Components</a>, <a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">Elements</a>, and <a href="https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html">Instances</a>这篇文章之后对这个概念有了自己的一点体会。React Components, Elements, and Instances这篇文章主要明确了一下几个点:</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; + 元素(element)是一个是用DOM节点或者组件来描述屏幕显示的纯对象，元素可以在属性(props.children)中包含其他的元素，一旦创建就不会改变。我们通过<code>JSX</code>和<code>React.createClass</code>创建的都是元素。<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; + 组件(component)可以接受属性(props)作为输入，然后返回一个元素树(element tree)作为输出。有多种实现方式:Class或者函数(Function)。</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;所以，<strong>反向继承不能保证完整的子组件树被解析</strong>的意思的解析的元素树中包含了组件(函数类型或者Class类型)，就不能再操作组件的子组件了，这就是所谓的<strong>不能完全解析</strong>。举个例子:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyFuncComponent</span> = (<span class="params">props</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClassComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WrappedComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MyFuncComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">MyClassComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOC</span> = (<span class="params">WrappedComponent</span>) =&gt;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">WrappedComponent</span> &#123;</span><br><span class="line">        <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> elementsTree = <span class="variable language_">super</span>.<span class="title function_">render</span>();</span><br><span class="line">            <span class="keyword">return</span> elementsTree;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">HOC</span>(<span class="title class_">WrappedComponent</span>);</span><br></pre></td></tr></table></figure><img src="/images/react/react3.png"><img src="/images/react/react4.png"><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们可以查看解析的元素树(element tree)，<code>div</code>下的<code>span</code>是可以被完全被解析的，但是<code>MyFuncComponent</code>和<code>MyClassComponent</code>都是组件类型的，其子组件就不能被完全解析了。</p><h2 id="操作props和state"><a href="#操作props和state" class="headerlink" title="操作props和state"></a>操作props和state</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在上面的图中我们可以看到，解析的元素树(element tree)中含有<code>props</code>和<code>state</code>(例子的组件中没有state),以及<code>ref</code>和<code>key</code>等值。因此，如果需要的话，我们不仅可以读取<code>props</code>和<code>state</code>,甚至可以修改增加、修改和删除。</p><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在某些情况下，我们可能需要为高阶属性传入一些参数，那我们就可以通过柯里化的形式传入参数，例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;React&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">HOCFactoryFactory</span> = (<span class="params">...params</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以做一些改变 params 的事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">HOC</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">            <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;可以通过下面方式使用:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">HOCFactoryFactory</span>(params)(<span class="title class_">WrappedComponent</span>)</span><br></pre></td></tr></table></figure><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这种方式是不是非常类似于<code>React-Redux</code>库中的<code>connect</code>函数，因为<code>connect</code>也是类似的一种高阶函数。反向继承不同于属性代理的调用顺序，组件的渲染顺序是: 先WrappedComponent再WrapperComponent(执行ComponentDidMount的时间)。而卸载的顺序也是先WrappedComponent再WrapperComponent(执行ComponentWillUnmount的时间)。</p><h2 id="HOC和Mixin的比较"><a href="#HOC和Mixin的比较" class="headerlink" title="HOC和Mixin的比较"></a>HOC和Mixin的比较</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;借用《深入React技术栈》一书中的图:</p><img src="/images/react/react5.png"><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;高阶组件属于函数式编程(functional programming)思想，对于被包裹的组件时不会感知到高阶组件的存在，而高阶组件返回的组件会在原来的组件之上具有功能增强的效果。而Mixin这种混入的模式，会给组件不断增加新的方法和属性，组件本身不仅可以感知，甚至需要做相关的处理(例如命名冲突、状态维护)，一旦混入的模块变多时，整个组件就变的难以维护，也就是为什么如此多的React库都采用高阶组件的方式进行开发。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;之前的文章&lt;a href=&quot;https://segmentfault.com/a/1190000008814336&quot;&gt;React Mixins入门指南&lt;/a&gt;介绍了React Mixin的使用。在实际使用中React Mixin的作用还是非常强大的，能够使得我们在多个组件中共用相同的方法。但是工程中大量使用Mixin也会带来非常多的问题。&lt;a href=&quot;https://twitter.com/dan_abramov&quot;&gt;Dan Abramov&lt;/a&gt;在文章&lt;a href=&quot;https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html&quot;&gt;Mixins Considered Harmful&lt;/a&gt;介绍了Mixin带来的一些问题,总结下来主要是以下几点:&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="react" scheme="https://jiangjinjin1.github.io/categories/react/"/>
    
    
    <category term="react" scheme="https://jiangjinjin1.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>markdown基础语法</title>
    <link href="https://jiangjinjin1.github.io/2018/11/16/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://jiangjinjin1.github.io/2018/11/16/markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2018-11-16T05:59:03.000Z</published>
    <updated>2018-11-29T05:45:34.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-markdown是什么？"><a href="#1-markdown是什么？" class="headerlink" title="1. markdown是什么？"></a>1. markdown是什么？</h1><blockquote><p>Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。<br>Markdown也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本Markdown.pl。</p></blockquote><span id="more"></span><h1 id="2-markdown语法"><a href="#2-markdown语法" class="headerlink" title="2. markdown语法"></a>2. markdown语法</h1><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><p>标题有两种形式：<br>(1) 第一种是用&#x3D;或者-表示一级或者二级标题</p><blockquote><p>一级标题<br><code>======</code><br>二级标题<br><code>------</code></p></blockquote><p>效果如下：</p><blockquote><h1 id="一级标题down"><a href="#一级标题down" class="headerlink" title="一级标题down"></a>一级标题down</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>(2) 第二种就是#来表示1-6级标题，与HTML的h1-h6相似。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; #一级标题</span><br><span class="line">&gt; ##二级标题</span><br><span class="line">&gt; ###三级标题</span><br><span class="line">&gt; ####四级标题</span><br><span class="line">&gt; #####五级标题</span><br><span class="line">&gt; ######六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="2-2-引用"><a href="#2-2-引用" class="headerlink" title="2.2 引用"></a>2.2 引用</h2><p>在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如：</p><blockquote><p>&gt;引用<br>  &gt;&gt;嵌套引用</p></blockquote><p>效果如下：</p><blockquote><p>引用</p></blockquote><blockquote><blockquote><p>嵌套引用</p></blockquote></blockquote><h2 id="2-3-代码块"><a href="#2-3-代码块" class="headerlink" title="2.3 代码块"></a>2.3 代码块</h2><p>代码块可以在每行加上四个空格来表示代码区域，效果如：</p><blockquote><p>   function foo(){<br>         return;<br>   }</p></blockquote><p>或者在开始与结尾用表示一样可以，效果同上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">&gt; <span class="keyword">return</span>;</span><br><span class="line">&gt; &#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-符号"><a href="#2-4-符号" class="headerlink" title="2.4 ``符号"></a>2.4 ``符号</h2><p>``可以用来表示相对较小区域的代码内容，或者起到标记作用，如</p><blockquote><p>`标记`</p></blockquote><p>效果如下：</p><blockquote><p><code>标记</code></p></blockquote><h2 id="2-5-强调与斜体"><a href="#2-5-强调与斜体" class="headerlink" title="2.5 强调与斜体"></a>2.5 强调与斜体</h2><p>在强调内容两侧分别加上*或者_，如：</p><blockquote><p>*斜体，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果如下：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h2 id="2-6-有序列表与无序列表"><a href="#2-6-有序列表与无序列表" class="headerlink" title="2.6 有序列表与无序列表"></a>2.6 有序列表与无序列表</h2><p>使用*、+、或-标记无序列表，如：</p><blockquote><p>(+-) 第一项 (+-) 第二项<br>*(+-) 第三项</p></blockquote><p>效果如下：</p><blockquote><ul><li>第一项</li></ul></blockquote><ul><li>第二项</li><li>第三项</li></ul><p>使用数字123加上.即是有序列表，如：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><p>效果如下：</p><blockquote><p>1.第一项<br>2.第二项<br>3.第三项</p></blockquote><h2 id="2-7-分割线"><a href="#2-7-分割线" class="headerlink" title="2.7 分割线"></a>2.7 分割线</h2><p>分割线最常使用就是三个或以上*，还可以使用-和_，如：</p><blockquote><p>我是分割线1<br>***<br>我是分割线2<br>———<br>我是分割线3<br>___</p></blockquote><p>效果如下：</p><p>我是分割线1</p><hr><h2 id="我是分割线2"><a href="#我是分割线2" class="headerlink" title="我是分割线2"></a>我是分割线2</h2><p>我是分割线3</p><hr><h2 id="2-8-链接"><a href="#2-8-链接" class="headerlink" title="2.8 链接"></a>2.8 链接</h2><p>链接由[]与()组成，[]中的指描述，()中跟链接地址，如：</p><blockquote><p>[百度](<a href="https://www.baidu.com/">https://www.baidu.com/</a>)</p></blockquote><p>效果如下：</p><blockquote><p><a href="https://www.baidu.com/">百度</a></p></blockquote><h2 id="2-9-图片引入"><a href="#2-9-图片引入" class="headerlink" title="2.9 图片引入"></a>2.9 图片引入</h2><blockquote><p>![图片](图片地址)</p></blockquote><p>效果如下</p><blockquote><p><img src="http://thirdwx.qlogo.cn/mmopen/vi_32/6h85RMsib6oGMKz0eibALsD1ricmicj6gUbUWAOs0C6Ynhf7Na6IBLyoWpHxTnHAZoAdznwicTf1Xaa61xdnEjV1QTg/132" alt="图片"></p></blockquote><p>2.9 表格<br>写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">First Header | Second Header | Third Header</span><br><span class="line">------------ | ------------- | ------------</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br><span class="line">Content Cell | Content Cell  | Content Cell</span><br></pre></td></tr></table></figure><p>在 Markdown 中，可以制作表格，例如：</p><table><thead><tr><th>First Header</th><th>Second Header</th><th>Third Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td><td>Content Cell</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-markdown是什么？&quot;&gt;&lt;a href=&quot;#1-markdown是什么？&quot; class=&quot;headerlink&quot; title=&quot;1. markdown是什么？&quot;&gt;&lt;/a&gt;1. markdown是什么？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。&lt;br&gt;Markdown也可以理解为将以MARKDOWN语言编写的语言转换成HTML内容的工具，最初是一个perl脚本Markdown.pl。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="工具类" scheme="https://jiangjinjin1.github.io/categories/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
    
    <category term="工具类" scheme="https://jiangjinjin1.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>理解applyMiddleware和createStore之间的关系</title>
    <link href="https://jiangjinjin1.github.io/2017/08/01/%E7%90%86%E8%A7%A3redux%E4%B8%AD%E7%9A%84applyMiddleware%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://jiangjinjin1.github.io/2017/08/01/%E7%90%86%E8%A7%A3redux%E4%B8%AD%E7%9A%84applyMiddleware%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2017-08-01T03:26:23.000Z</published>
    <updated>2018-11-29T05:45:27.620Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>不得不佩服redux的作者<code>Dan Abramov</code>，看完<code>applyMiddleware</code>的源码,我的感受就是：还有这种操作？<br>与其说是理解applyMiddleware，不如说是理清<code>createStore</code>，<code>applyMiddleware</code>和一些中间件的关系，和为什么中间件都是<code>export const createThunkMiddleware = (&#123; dispatch, getState &#125;) =&gt; next =&gt; action =&gt; &#123;...&#125;</code>三层嵌套关系。  </p><span id="more"></span><pre><code class="javascript">export default function applyMiddleware() &#123;  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key &lt; _len; _key++) &#123;    middlewares[_key] = arguments[_key];  &#125;  return function (createStore) &#123;    return function (reducer, preloadedState, enhancer) &#123;      var store = createStore(reducer, preloadedState, enhancer);      var _dispatch = store.dispatch;      var chain = [];      var middlewareAPI = &#123;        getState: store.getState,        dispatch: function dispatch(action) &#123;          return _dispatch(action);        &#125;      &#125;;      chain = middlewares.map(function (middleware) &#123;        return middleware(middlewareAPI);      &#125;);      _dispatch = compose.apply(undefined, chain)(store.dispatch);      return _extends(&#123;&#125;, store, &#123;        dispatch: _dispatch      &#125;);    &#125;;  &#125;;&#125;</code></pre><p>精简的30行代码，设计思想强无敌。不难看出applyMiddleware这个函数接收一个createStore函数返回一个接收参数和createStore一样的函数。如下图是createStore的部分源码：<br><img src="/images/createStore1.png"><br>enhancer就是applyMiddleware执行完第一层后的函数，传一个createStore函数，再次返回一个函数，但此时只传外层的reducer和preloadedState，却没在传第三个enhancer参数。这里要看回到applyMiddleware函数<br><img src="/images/applyMiddleware1.png"><br>两层形参对应上面的实参，可以看到applyMiddleware内部还调用了createStore，整个一个完整的逻辑如下（部分重要代码）：  </p><p><code>首先是调用createStore，这个enhancer其实就是applyMiddleware(middleware1, middleware2)。</code>  </p><pre><code class="javascript">const store = createStore(    reducer,    undefined,    enhancer  )</code></pre><p><code>其次是createStore里判断执行enhancer，如果传了enhancer，那就对enhancer执行再执行，且第二次执行不传enhancer，这里return的其实也是applyMiddleware函数的返回值，但是等下在applyMiddleware里还会在执行一次createStore。</code>  </p><pre><code class="javascript">if (typeof enhancer !== &#39;undefined&#39;) &#123;    if (typeof enhancer !== &#39;function&#39;) &#123;      throw new Error(&#39;Expected the enhancer to be a function.&#39;);    &#125;    return enhancer(createStore)(reducer, preloadedState);  &#125;</code></pre><p><code>最后是applyMiddleware里的，由于createStore上面最后一次执行未传enhancer，所以applyMiddleware里的createStore是不会再次执行enhancer,不然就死循环了。拿到返回的sotre对象，重新改造dispatch并返回，这就是中间件的实现的一个大体流程。</code></p><pre><code class="javascript">  return function (createStore) &#123;    return function (reducer, preloadedState, enhancer) &#123;      var store = createStore(reducer, preloadedState, enhancer);      //省略一万行    &#125;  &#125;</code></pre><p>至此，相信大家也差不多理解了createStore和applyMiddleware相互之间的关系了，其实关于中间件为什么嵌套三层的问题也自然而然的解开了，一张图片来说明吧。<br><img src="/images/applyMiddleware2.png"></p><h4 id="菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。"><a href="#菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。" class="headerlink" title="菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。"></a>菜鸟学习笔记，如有不对，还希望高手指点。如有造成误解，还希望多多谅解。</h4><p>著作权归作者所有。<br>商业转载请联系作者获得授权,非商业转载请注明出处。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;不得不佩服redux的作者&lt;code&gt;Dan Abramov&lt;/code&gt;，看完&lt;code&gt;applyMiddleware&lt;/code&gt;的源码,我的感受就是：还有这种操作？&lt;br&gt;与其说是理解applyMiddleware，不如说是理清&lt;code&gt;createStore&lt;/code&gt;，&lt;code&gt;applyMiddleware&lt;/code&gt;和一些中间件的关系，和为什么中间件都是&lt;code&gt;export const createThunkMiddleware = (&amp;#123; dispatch, getState &amp;#125;) =&amp;gt; next =&amp;gt; action =&amp;gt; &amp;#123;...&amp;#125;&lt;/code&gt;三层嵌套关系。  &lt;/p&gt;</summary>
    
    
    
    <category term="react" scheme="https://jiangjinjin1.github.io/categories/react/"/>
    
    <category term="redux" scheme="https://jiangjinjin1.github.io/categories/react/redux/"/>
    
    
    <category term="react" scheme="https://jiangjinjin1.github.io/tags/react/"/>
    
  </entry>
  
</feed>
